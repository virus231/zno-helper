[{"C:\\Front\\TypeScript\\my-app\\src\\App.tsx":"1","C:\\Front\\TypeScript\\my-app\\src\\index.tsx":"2","C:\\Front\\TypeScript\\my-app\\src\\reportWebVitals.ts":"3","C:\\Front\\TypeScript\\my-app\\src\\pages\\SignUp.tsx":"4","C:\\Front\\TypeScript\\my-app\\src\\redux\\reducer\\AuthReducer.js":"5","C:\\Front\\TypeScript\\my-app\\src\\redux\\actions\\action.js":"6","C:\\Front\\TypeScript\\my-app\\src\\pages\\LogIn.tsx":"7","C:\\Users\\User\\Documents\\zno-helper\\src\\index.tsx":"8","C:\\Users\\User\\Documents\\zno-helper\\src\\App.tsx":"9","C:\\Users\\User\\Documents\\zno-helper\\src\\redux\\actions\\action.js":"10","C:\\Users\\User\\Documents\\zno-helper\\src\\api\\config.ts":"11","C:\\Users\\User\\Documents\\zno-helper\\src\\reportWebVitals.ts":"12","C:\\Users\\User\\Documents\\zno-helper\\src\\store\\store.ts":"13","C:\\Users\\User\\Documents\\zno-helper\\src\\store\\root-reducer.ts":"14","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\SignUp.tsx":"15","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\LogIn.tsx":"16","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\styles\\auth\\auth.reducer.ts":"17","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\styles\\auth\\thunks.ts":"18","C:\\Users\\User\\Documents\\zno-helper\\src\\api\\authApi.ts":"19","C:\\Users\\User\\Documents\\zno-helper\\src\\utils\\axios.ts":"20","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\ResetPassword.tsx":"21","C:\\Users\\User\\Documents\\zno-helper\\src\\components\\Subjects.tsx":"22"},{"size":555,"mtime":1607522680114,"results":"23","hashOfConfig":"24"},{"size":676,"mtime":1607354597855,"results":"25","hashOfConfig":"24"},{"size":425,"mtime":1607252810074,"results":"26","hashOfConfig":"24"},{"size":7755,"mtime":1607623413302,"results":"27","hashOfConfig":"24"},{"size":2061,"mtime":1607624696456,"results":"28","hashOfConfig":"24"},{"size":1564,"mtime":1607624072953,"results":"29","hashOfConfig":"24"},{"size":4136,"mtime":1607616246240,"results":"30","hashOfConfig":"24"},{"size":701,"mtime":1607680221655,"results":"31","hashOfConfig":"32"},{"size":803,"mtime":1607713512334,"results":"33","hashOfConfig":"32"},{"size":1564,"mtime":1607635236913,"results":"34","hashOfConfig":"32"},{"size":65,"mtime":1607694441962,"results":"35","hashOfConfig":"32"},{"size":440,"mtime":1607635236917,"results":"36","hashOfConfig":"32"},{"size":167,"mtime":1607680925730,"results":"37","hashOfConfig":"32"},{"size":193,"mtime":1607637590703,"results":"38","hashOfConfig":"32"},{"size":7918,"mtime":1607697042058,"results":"39","hashOfConfig":"32"},{"size":4313,"mtime":1607697042092,"results":"40","hashOfConfig":"32"},{"size":2084,"mtime":1607695818075,"results":"41","hashOfConfig":"32"},{"size":1022,"mtime":1607696177935,"results":"42","hashOfConfig":"32"},{"size":784,"mtime":1607694351768,"results":"43","hashOfConfig":"32"},{"size":1528,"mtime":1607637268378,"results":"44","hashOfConfig":"32"},{"size":3612,"mtime":1607713680155,"results":"45","hashOfConfig":"32"},{"size":7280,"mtime":1607793574586,"results":"46","hashOfConfig":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"8hewoy",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"geba70",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"64"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Front\\TypeScript\\my-app\\src\\App.tsx",[],["99","100"],"C:\\Front\\TypeScript\\my-app\\src\\index.tsx",[],"C:\\Front\\TypeScript\\my-app\\src\\reportWebVitals.ts",[],"C:\\Front\\TypeScript\\my-app\\src\\pages\\SignUp.tsx",["101"],"C:\\Front\\TypeScript\\my-app\\src\\redux\\reducer\\AuthReducer.js",[],"C:\\Front\\TypeScript\\my-app\\src\\redux\\actions\\action.js",[],"C:\\Front\\TypeScript\\my-app\\src\\pages\\LogIn.tsx",["102"],"C:\\Users\\User\\Documents\\zno-helper\\src\\index.tsx",[],["103","104"],"C:\\Users\\User\\Documents\\zno-helper\\src\\App.tsx",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\redux\\actions\\action.js",[],["105","106"],"C:\\Users\\User\\Documents\\zno-helper\\src\\api\\config.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\reportWebVitals.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\store\\store.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\store\\root-reducer.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\SignUp.tsx",["107"],"import React from \"react\";\r\nimport {Link} from 'react-router-dom'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport MaskedInput from \"react-text-mask\";\r\nimport {register} from \"./styles/auth/thunks\";\r\n\r\n\r\ninterface FormValues {\r\n    firstName: string;\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst phoneNumberMask = [\r\n    \"(\",\r\n    /[1-10]/,\r\n    /\\d/,\r\n    /\\d/,\r\n    \")\",\r\n    \" \",\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    \"-\",\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/,\r\n    /\\d/\r\n];\r\n\r\nfunction SignUp():JSX.Element {\r\n    const state = useSelector(state =>  console.log(state.auth))\r\n    console.log(state)\r\n    const dispatch = useDispatch()\r\n    const onRegisterUser = (values) => dispatch(register(values))\r\n\r\n    const initialValues: FormValues = {\r\n        firstName: '',\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const userSchema = Yup.object({\r\n        firstName: Yup.string().required('First Name is required'),\r\n        email: Yup.string().email('Email is invalid').required('Email is required'),\r\n        password: Yup.string().min(6, 'Введи 6 символів').required('Password is required')\r\n    })\r\n\r\n    type User = Yup.InferType<typeof userSchema>;\r\n\r\n\r\n    return (\r\n        <section className=\"signup promo d-flex justify-content-center align-items-start pt-5\">\r\n            <Container>\r\n                <Row className=\"\">\r\n                    <Col lg={8} className=\"promo-col\">\r\n                        <p>\r\n                            <Link to=\"/signup\">\r\n                                Z-Helper\r\n                            </Link>\r\n                        </p>\r\n                    </Col>\r\n                    <Col lg={4} className=\"pt-5 mt-5\">\r\n                        <h3>Реєстрація</h3>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={userSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                onRegisterUser(values)\r\n                            }}\r\n                            render={({ errors, status, touched, handleChange, handleSubmit,\r\n                                         handleBlur, values }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"firstName\">Ім’я користувача</label>\r\n                                        <Field\r\n                                            name=\"firstName\"\r\n                                            type=\"text\"\r\n                                            value={values.firstName}\r\n                                            onChange={handleChange}\r\n                                            className={`form-control ${errors.firstName && touched.firstName && 'is-invalid'}`}/>\r\n                                        <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"email\">Електронна пошта</label>\r\n                                        <Field\r\n                                            name=\"email\"\r\n                                            type=\"text\"\r\n                                            value={values.email}\r\n                                            onChange={handleChange}\r\n                                            className={`form-control ${errors.email && touched.email && 'is-invalid'}`}/>\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group d-flex flex-column\">\r\n                                        <label htmlFor=\"number\">Номер телефону</label>\r\n                                        <Field\r\n                                            name=\"phone\"\r\n                                            // value={values.number}\r\n                                            onChange={handleChange}\r\n                                            render={({ field }) => (\r\n                                                <MaskedInput\r\n                                                    {...field}\r\n                                                    mask={phoneNumberMask}\r\n                                                    id=\"phone\"\r\n                                                    placeholder=\"Ваш номер\"\r\n                                                    type=\"text\"\r\n                                                    onChange={handleChange}\r\n                                                />\r\n\r\n                                            )}\r\n\r\n                                        />\r\n                                        <ErrorMessage name=\"number\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"password\">Пароль</label>\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            value={values.password}\r\n                                            onChange={handleChange}\r\n                                            className={`form-control ${errors.password && touched.password && 'is-invalid'}`}/>\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group text-center\">\r\n                                        <p>Вказати реферала</p>\r\n                                    </div>\r\n                                    {/*<div className=\"form-group\">*/}\r\n                                    {/*    <label htmlFor=\"confirmPassword\">Confirm Password</label>*/}\r\n                                    {/*    <Field*/}\r\n                                    {/*        name=\"confirmPassword\"*/}\r\n                                    {/*        type=\"password\"*/}\r\n                                    {/*        className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />*/}\r\n                                    {/*    <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />*/}\r\n                                    {/*</div>*/}\r\n                                    <div className=\"form-group text-center\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary btn-register mr-2 px-5\">Зареєструватися</button>\r\n                                        {/*<button type=\"reset\" className=\"btn btn-secondary\">Reset</button>*/}\r\n                                        <p>\r\n                                            Вже маєш профіль?\r\n                                            <Link to=\"/login\" className=\"ml-2\">\r\n                                                Увійти\r\n                                            </Link>\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default SignUp\r\n","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\LogIn.tsx",["108"],"import React from \"react\";\r\nimport {Link} from 'react-router-dom'\r\nimport {useDispatch} from 'react-redux'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from \"yup\";\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport {LoginAuthAction} from \"../redux/actions/action\";\r\n\r\ninterface FormValues {\r\n    number: string;\r\n    password: string;\r\n}\r\n\r\nfunction LogIn() {\r\n    const dispatch = useDispatch()\r\n    const onLogInUser = (fields) => dispatch(LoginAuthAction(fields))\r\n\r\n    const initialValues: FormValues = {\r\n        number: '',\r\n        password: '',\r\n    };\r\n\r\n    const userSchema = Yup.object({\r\n        number: Yup.string().max(11).min(3)\r\n            // .test('Phone test', 'Phone number must be valid', (val) => {\r\n            //     val = val.replace(/[\\s\\-]/g, '');\r\n            //     return val.match(/^((\\+?3)?8)?((0\\(\\d{2}\\)?)|(\\(0\\d{2}\\))|(0\\d{2}))\\d{7}$/) != null;\r\n            // })\r\n            .required('Required'),\r\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\r\n    })\r\n\r\n    type User = Yup.InferType<typeof userSchema>;\r\n\r\n    return (\r\n        <section className=\"signup promo d-flex justify-content-center align-items-start pt-5\">\r\n            <Container>\r\n                <Row className=\"\">\r\n                    <Col lg={8} className=\"promo-col\">\r\n                        <p>\r\n                            <Link to=\"/signup\">\r\n                                Z-Helper\r\n                            </Link>\r\n                        </p>\r\n                    </Col>\r\n                    <Col lg={4} className=\"pt-5 mt-5\">\r\n                        <h3>Вхід</h3>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={userSchema}\r\n                            onSubmit={onLogInUser}\r\n                            render={({ errors, status, touched }) => (\r\n                                <Form>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"number\">Номер телефону</label>\r\n                                        <Field\r\n                                            name=\"number\"\r\n                                            type=\"number\"\r\n                                            className={`form-control ${errors.number && touched.number && 'is-invalid'}`}/>\r\n                                        <ErrorMessage name=\"number\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <label htmlFor=\"password\">Пароль</label>\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            className={`form-control ${errors.password && touched.password && 'is-invalid'}`}/>\r\n                                            <Link to=\"/reset\">\r\n                                                Відновити пароль\r\n                                            </Link>\r\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group text-center\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary mr-2 px-5 btn-login\">Увійти</button>\r\n                                        <p>\r\n                                            Ще не маєш профілю?\r\n                                            <Link to=\"/signup\" className=\"ml-2\">\r\n                                                Створити\r\n                                            </Link>\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default LogIn;\r\n","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\styles\\auth\\auth.reducer.ts",["109"],"import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AuthResponse, StateHadnlers } from \"../../../utils/interfaces\";\r\nimport { checkEmail, login, register, sendSmsToPhone } from \"./thunks\";\r\n\r\nconst initialState: AuthResponse & StateHadnlers = {\r\n    email: '',\r\n    id: 0,\r\n    roles: [],\r\n    token: '',\r\n    username: '',\r\n    error: null,\r\n    loading: false\r\n}\r\nexport const defaultError = 'Somthing went wrong!'\r\n\r\nexport default createReducer(initialState, builder =>\r\n    builder.addCase(register.pending, (state) => {\r\n        console.log(state)\r\n        state.loading = true\r\n        state.error = null\r\n    })\r\n        .addCase(register.fulfilled, (state, action: PayloadAction<AuthResponse>) => {\r\n            state = { ...action.payload, ...state }\r\n            // state.loading = false\r\n            // state.error = null\r\n        })\r\n        .addCase(register.rejected, (state, { error }) => {\r\n            state.loading = false\r\n            state.error = error.message ?? defaultError\r\n        })\r\n        .addCase(login.pending, (state) => {\r\n            state.loading = true\r\n            state.error = null\r\n        })\r\n        .addCase(login.fulfilled, (state, action: PayloadAction<AuthResponse>) => {\r\n            // state = { ...action.payload, ...state }\r\n            // state.loading = false\r\n            // state.error = null\r\n        })\r\n        .addCase(login.rejected, (state, { error }) => {\r\n            state.loading = false\r\n            state.error = error.message ?? defaultError\r\n        })\r\n        .addCase(sendSmsToPhone.pending, (state) => {\r\n            state.loading = true\r\n            state.error = null\r\n        })\r\n        .addCase(sendSmsToPhone.fulfilled, (state, action: PayloadAction<any>) => {\r\n            // state = { ...action.payload, ...state }\r\n            // state.loading = false\r\n            // state.error = null\r\n        })\r\n        .addCase(sendSmsToPhone.rejected, (state, { error }) => {\r\n            state.loading = false\r\n            state.error = error.message ?? defaultError\r\n        })\r\n\r\n\r\n)\r\n","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\styles\\auth\\thunks.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\api\\authApi.ts",[],"C:\\Users\\User\\Documents\\zno-helper\\src\\utils\\axios.ts",["110"],"import BaseAxios from \"axios\";\r\nimport jwtDecode , {JwtPayload} from \"jwt-decode\";\r\nimport { BASE_URL } from \"../api/config\";\r\n\r\nexport const axios = BaseAxios.create({ baseURL: BASE_URL })\r\n\r\nconst whiteList = ['auth',]\r\n\r\nconst inWhiteList = (url: string): boolean => {\r\n    const match = whiteList.find((i) => url.includes(i))\r\n    return !!match\r\n}\r\nconst tokenValid = (token?: string): boolean => {\r\n    if(!token) return false\r\n    try {\r\n        const currentDate = new Date()\r\n        const { exp }: JwtPayload = jwtDecode(token)\r\n        if(exp === undefined) return false\r\n        return !(exp * 1000 < currentDate.getTime())\r\n    } catch (error) {\r\n        return false\r\n    }\r\n}\r\n\r\naxios.interceptors.request.use(\r\n    async (request) => {\r\n        if (!inWhiteList(request.url ?? '')) {\r\n            const newRequest = { ...request }\r\n            return newRequest\r\n        }\r\n\r\n        return request\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error)\r\n    },\r\n)\r\n\r\naxios.interceptors.response.use(\r\n    (response) => {\r\n        return response.data\r\n    },\r\n    async (error) => {\r\n        // const { token } = store.getState().login\r\n        if (\r\n            error &&\r\n            error.response &&\r\n            (error.response.status === 401 || error.response.status === 403)\r\n            // && token\r\n        ) {\r\n            // eslint-disable-next-line no-void\r\n            // void store.dispatch(doLogout())\r\n            return null\r\n        }\r\n        return Promise.reject(error)\r\n    },\r\n)\r\n","C:\\Users\\User\\Documents\\zno-helper\\src\\pages\\ResetPassword.tsx",["111"],"import React from 'react';\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\ninterface FormValues {\r\n    email: string;\r\n}\r\n\r\n\r\nfunction ResetPassword():JSX.Element {\r\n\r\n    const initialValues: FormValues = {\r\n        email: '',\r\n    };\r\n\r\n    const userSchema = Yup.object({\r\n        email: Yup.string().email('Email is invalid').required('Email is required'),\r\n    })\r\n\r\n    type User = Yup.InferType<typeof userSchema>;\r\n\r\n    function onReset(values: FormikValues) {\r\n        console.log(values)\r\n    }\r\n\r\n    return (\r\n        <section className=\"reset d-flex justify-content-center align-items-start pt-5\">\r\n            <Container>\r\n                <Row className=\"\">\r\n                    <Col lg={8} className=\"promo-col\">\r\n                        <p>\r\n                            <Link to=\"/signup\">\r\n                                Z-Helper\r\n                            </Link>\r\n                        </p>\r\n                    </Col>\r\n                    <Col lg={4} className=\"pt-5 mt-5\">\r\n                        <h3 className=\"reset-title\">Відновлення паролю</h3>\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            validationSchema={userSchema}\r\n                            onSubmit={(values, actions) => {\r\n                                onReset(values)\r\n                            }}\r\n                            render={({ errors, status, touched, handleChange, handleSubmit,\r\n                                         handleBlur, values }) => (\r\n                                <Form onSubmit={handleSubmit}>\r\n                                    <div className=\"form-group mt-5\">\r\n                                        <label htmlFor=\"email\">Електронна пошта</label>\r\n                                        <Field\r\n                                            name=\"email\"\r\n                                            type=\"text\"\r\n                                            value={values.email}\r\n                                            onChange={handleChange}\r\n                                            className={`form-control ${errors.email && touched.email && 'is-invalid'}`}/>\r\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <Link to=\"/\">Відновлення через телефон</Link>\r\n                                    </div>\r\n                                    <div className=\"form-group text-center\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary btn-register mr-2 px-5\">Надіслати</button>\r\n                                        <p>\r\n                                            Згадав пароль?\r\n                                            <Link to=\"/login\" className=\"ml-2\">\r\n                                                Увійти\r\n                                            </Link>\r\n                                        </p>\r\n                                    </div>\r\n\r\n                                </Form>\r\n                            )}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ResetPassword\r\n","C:\\Users\\User\\Documents\\zno-helper\\src\\components\\Subjects.tsx",["112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":55,"column":10,"nodeType":"120","messageId":"121","endLine":55,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":34,"column":10,"nodeType":"120","messageId":"121","endLine":34,"endColumn":14},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","replacedBy":"123"},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","replacedBy":"123"},{"ruleId":"118","severity":1,"message":"119","line":53,"column":10,"nodeType":"120","messageId":"121","endLine":53,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":33,"column":10,"nodeType":"120","messageId":"121","endLine":33,"endColumn":14},{"ruleId":"118","severity":1,"message":"124","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":20},{"ruleId":"118","severity":1,"message":"125","line":13,"column":7,"nodeType":"120","messageId":"121","endLine":13,"endColumn":17},{"ruleId":"118","severity":1,"message":"119","line":23,"column":10,"nodeType":"120","messageId":"121","endLine":23,"endColumn":14},{"ruleId":"118","severity":1,"message":"126","line":12,"column":8,"nodeType":"120","messageId":"121","endLine":12,"endColumn":10},{"ruleId":"118","severity":1,"message":"127","line":17,"column":20,"nodeType":"120","messageId":"121","endLine":17,"endColumn":29},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"@typescript-eslint/no-unused-vars","'User' is defined but never used.","Identifier","unusedVar",["128"],["129"],"'checkEmail' is defined but never used.","'tokenValid' is assigned a value but never used.","'ph' is defined but never used.","'setSwiper' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]