[{"/home/vlad/Front/zno-helper/src/index.tsx":"1","/home/vlad/Front/zno-helper/src/reportWebVitals.ts":"2","/home/vlad/Front/zno-helper/src/store/store.ts":"3","/home/vlad/Front/zno-helper/src/App.tsx":"4","/home/vlad/Front/zno-helper/src/store/root-reducer.ts":"5","/home/vlad/Front/zno-helper/src/pages/index.ts":"6","/home/vlad/Front/zno-helper/src/pages/CreateTest.tsx":"7","/home/vlad/Front/zno-helper/src/pages/Home.tsx":"8","/home/vlad/Front/zno-helper/src/pages/LogIn.tsx":"9","/home/vlad/Front/zno-helper/src/pages/ResetPassword.tsx":"10","/home/vlad/Front/zno-helper/src/pages/ChoiceSubjects.tsx":"11","/home/vlad/Front/zno-helper/src/pages/Tests.tsx":"12","/home/vlad/Front/zno-helper/src/pages/Test.tsx":"13","/home/vlad/Front/zno-helper/src/pages/Subjects.tsx":"14","/home/vlad/Front/zno-helper/src/pages/duel/DuelStart.tsx":"15","/home/vlad/Front/zno-helper/src/pages/duel/DuelJoin.tsx":"16","/home/vlad/Front/zno-helper/src/pages/duel/DuelTest.tsx":"17","/home/vlad/Front/zno-helper/src/pages/CreateTests.tsx":"18","/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateBooleanAnswer.tsx":"19","/home/vlad/Front/zno-helper/src/components/SubjectCart.tsx":"20","/home/vlad/Front/zno-helper/src/components/ThemeCart.tsx":"21","/home/vlad/Front/zno-helper/src/components/Answer.tsx":"22","/home/vlad/Front/zno-helper/src/components/Question.tsx":"23","/home/vlad/Front/zno-helper/src/components/CodeInput.tsx":"24","/home/vlad/Front/zno-helper/src/pages/duel/test_templates/Boolean.tsx":"25","/home/vlad/Front/zno-helper/src/api/authApi.ts":"26","/home/vlad/Front/zno-helper/src/utils/axios.ts":"27","/home/vlad/Front/zno-helper/src/api/config.ts":"28","/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateSingleAnswer.tsx":"29","/home/vlad/Front/zno-helper/src/pages/Subject.tsx":"30","/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateMultiAnswer.tsx":"31","/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateAccordenceAnswer.tsx":"32","/home/vlad/Front/zno-helper/src/utils/interfaces.ts":"33","/home/vlad/Front/zno-helper/src/components/SideBar/SideBar.tsx":"34","/home/vlad/Front/zno-helper/src/api/testsApi.ts":"35","/home/vlad/Front/zno-helper/src/store/actions/tests.actions.ts":"36","/home/vlad/Front/zno-helper/src/helpers/authHelpers.ts":"37","/home/vlad/Front/zno-helper/src/helpers/testHelpers.ts":"38","/home/vlad/Front/zno-helper/src/utils/constants.ts":"39","/home/vlad/Front/zno-helper/src/components/svg/CloseCircle.tsx":"40","/home/vlad/Front/zno-helper/src/components/svg/MultiSelect.tsx":"41","/home/vlad/Front/zno-helper/src/components/svg/Delete.tsx":"42","/home/vlad/Front/zno-helper/src/components/svg/SingleSelect.tsx":"43","/home/vlad/Front/zno-helper/src/components/Spinner.tsx":"44","/home/vlad/Front/zno-helper/src/store/selectors.ts":"45","/home/vlad/Front/zno-helper/src/pages/SignUp.tsx":"46","/home/vlad/Front/zno-helper/src/store/reducers/auth.reducer.ts":"47","/home/vlad/Front/zno-helper/src/store/reducers/validation.reducer.ts":"48","/home/vlad/Front/zno-helper/src/store/actions/thunks.ts":"49","/home/vlad/Front/zno-helper/src/pages/duel/test_templates/MultiAnswer.tsx":"50","/home/vlad/Front/zno-helper/src/pages/duel/test_templates/SingleAnswer.tsx":"51","/home/vlad/Front/zno-helper/src/components/PrivateRoute/PrivateRoute.tsx":"52","/home/vlad/Front/zno-helper/src/components/Alert/Alert.tsx":"53","/home/vlad/Front/zno-helper/src/store/actions/alerts.actions.ts":"54","/home/vlad/Front/zno-helper/src/store/reducers/alert.reducer.ts":"55","/home/vlad/Front/zno-helper/src/components/create-test-templates/template-components/TypePicker.tsx":"56"},{"size":678,"mtime":1618215383798,"results":"57","hashOfConfig":"58"},{"size":425,"mtime":1618215383802,"results":"59","hashOfConfig":"58"},{"size":221,"mtime":1618215383802,"results":"60","hashOfConfig":"58"},{"size":2784,"mtime":1620223478327,"results":"61","hashOfConfig":"58"},{"size":351,"mtime":1618510091006,"results":"62","hashOfConfig":"58"},{"size":655,"mtime":1618215383802,"results":"63","hashOfConfig":"58"},{"size":13461,"mtime":1615456478830,"results":"64","hashOfConfig":"58"},{"size":2854,"mtime":1618215383798,"results":"65","hashOfConfig":"58"},{"size":9372,"mtime":1620216656144,"results":"66","hashOfConfig":"58"},{"size":3310,"mtime":1618215383798,"results":"67","hashOfConfig":"58"},{"size":3775,"mtime":1618215383798,"results":"68","hashOfConfig":"58"},{"size":1310,"mtime":1618215383798,"results":"69","hashOfConfig":"58"},{"size":1417,"mtime":1618215383798,"results":"70","hashOfConfig":"58"},{"size":4494,"mtime":1618215383798,"results":"71","hashOfConfig":"58"},{"size":7665,"mtime":1618225296102,"results":"72","hashOfConfig":"58"},{"size":1604,"mtime":1618215383798,"results":"73","hashOfConfig":"58"},{"size":949,"mtime":1618222099354,"results":"74","hashOfConfig":"58"},{"size":55044,"mtime":1620235228370,"results":"75","hashOfConfig":"58"},{"size":5353,"mtime":1618215383798,"results":"76","hashOfConfig":"58"},{"size":7094,"mtime":1618215383798,"results":"77","hashOfConfig":"58"},{"size":923,"mtime":1618215383798,"results":"78","hashOfConfig":"58"},{"size":703,"mtime":1618215383798,"results":"79","hashOfConfig":"58"},{"size":215,"mtime":1618215383798,"results":"80","hashOfConfig":"58"},{"size":238,"mtime":1618215383798,"results":"81","hashOfConfig":"58"},{"size":900,"mtime":1618215383802,"results":"82","hashOfConfig":"58"},{"size":781,"mtime":1618215383786,"results":"83","hashOfConfig":"58"},{"size":2075,"mtime":1620222770646,"results":"84","hashOfConfig":"58"},{"size":141,"mtime":1618215383786,"results":"85","hashOfConfig":"58"},{"size":8985,"mtime":1620225885481,"results":"86","hashOfConfig":"58"},{"size":1926,"mtime":1618215383798,"results":"87","hashOfConfig":"58"},{"size":7951,"mtime":1618215383798,"results":"88","hashOfConfig":"58"},{"size":7339,"mtime":1618215383798,"results":"89","hashOfConfig":"58"},{"size":3563,"mtime":1617813601237,"results":"90","hashOfConfig":"58"},{"size":6168,"mtime":1618215383798,"results":"91","hashOfConfig":"58"},{"size":1000,"mtime":1618215383786,"results":"92","hashOfConfig":"58"},{"size":1293,"mtime":1618215383802,"results":"93","hashOfConfig":"58"},{"size":107,"mtime":1618215383798,"results":"94","hashOfConfig":"58"},{"size":1267,"mtime":1618215383798,"results":"95","hashOfConfig":"58"},{"size":242,"mtime":1618215383802,"results":"96","hashOfConfig":"58"},{"size":2239,"mtime":1618215383798,"results":"97","hashOfConfig":"58"},{"size":1329,"mtime":1618215383798,"results":"98","hashOfConfig":"58"},{"size":2387,"mtime":1618215383798,"results":"99","hashOfConfig":"58"},{"size":1563,"mtime":1618215383798,"results":"100","hashOfConfig":"58"},{"size":358,"mtime":1618215383798,"results":"101","hashOfConfig":"58"},{"size":159,"mtime":1618512796388,"results":"102","hashOfConfig":"58"},{"size":28035,"mtime":1619725990117,"results":"103","hashOfConfig":"58"},{"size":2367,"mtime":1620223038805,"results":"104","hashOfConfig":"58"},{"size":1859,"mtime":1618215383802,"results":"105","hashOfConfig":"58"},{"size":1277,"mtime":1620216414800,"results":"106","hashOfConfig":"58"},{"size":4374,"mtime":1618215383802,"results":"107","hashOfConfig":"58"},{"size":4838,"mtime":1618215383802,"results":"108","hashOfConfig":"58"},{"size":533,"mtime":1619808423880,"results":"109","hashOfConfig":"58"},{"size":1756,"mtime":1620216395808,"results":"110","hashOfConfig":"58"},{"size":170,"mtime":1618517329096,"results":"111","hashOfConfig":"58"},{"size":417,"mtime":1618517350512,"results":"112","hashOfConfig":"58"},{"size":3654,"mtime":1620235101795,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"1k0g8za",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"116"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"116"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"116"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"116"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"116"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"116"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/vlad/Front/zno-helper/src/index.tsx",[],["250","251"],"/home/vlad/Front/zno-helper/src/reportWebVitals.ts",[],"/home/vlad/Front/zno-helper/src/store/store.ts",[],"/home/vlad/Front/zno-helper/src/App.tsx",["252"],"import React, {lazy, Suspense} from 'react';\nimport { useSelector } from 'react-redux'\nimport CircularProgress from '@material-ui/core/CircularProgress';  \nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {ResetPassword, Subject, Tests, CreateTests, DuelStart, ChoiceSubjects, DuelJoin, DuelTest} from './pages/index'\nimport SideBar from './components/SideBar/SideBar'\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport './pages/main.scss'\nimport './App.scss';\nimport { Spinner } from './components/Spinner';\nimport { authSelector } from './store/selectors';\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute';\nimport { SimpleAlert } from './components/Alert/Alert';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        backdrop: {\n            zIndex: theme.zIndex.drawer + 1,\n            color: '#fff',\n        },\n    }),\n);\n\nconst SignUp = lazy(() => import('./pages/SignUp').then(({ SignUp }) => ({ default: SignUp })))\nconst LogIn = lazy(() => import('./pages/LogIn').then(({ LogIn }) => ({ default: LogIn })))\nconst Home = lazy(() => import('./pages/Home').then(({ Home }) => ({ default: Home })))\n\nfunction App():JSX.Element {\n    const classes = useStyles();\n    const {loading} = useSelector(authSelector)\n    \n    return (\n        <Suspense fallback={<Spinner/>}>\n            <Backdrop className={classes.backdrop} open={loading}>\n              <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <div className=\"App\">\n                <SimpleAlert alert={\"\"}/>\n                <Switch>\n                    <Route exact path=\"/\" component={SignUp}/>\n                    <Route exact path=\"/login\" component={LogIn}/>\n                    <Route exact path=\"/reset\" component={ResetPassword}/>\n                    <Route exact path=\"/choice-subjects\" component={ChoiceSubjects}/>\n                    <div className=\"d-flex align-items-center justify-content-center my-5\">\n                        <SideBar/>\n                        <Route exact path=\"/home\" component={Home}/>\n                        <Route exact path=\"/create-test\" component={CreateTests}/>\n                        <Route exact path=\"/duel-start\" component={DuelStart}/>\n                        <Route exact path=\"/duel-test\" component={DuelTest}/>\n                        <Route exact path=\"/tests/:id\" component={Tests}/>\n                        <Route exact path=\"/subject/:id\" component={Subject}/>\n                        <Route exact path=\"/duel-join/:id\" component={DuelJoin}/>\n                    </div>\n                    <Redirect to=\"/signup\"/>\n                </Switch>\n            </div>\n        </Suspense>\n    );\n}\n\nexport default App;\n","/home/vlad/Front/zno-helper/src/store/root-reducer.ts",[],"/home/vlad/Front/zno-helper/src/pages/index.ts",[],"/home/vlad/Front/zno-helper/src/pages/CreateTest.tsx",[],["253","254"],"/home/vlad/Front/zno-helper/src/pages/Home.tsx",[],"/home/vlad/Front/zno-helper/src/pages/LogIn.tsx",["255","256","257"],"import React, {useState} from \"react\";\nimport {Link, useHistory} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport {checkPhone, login} from '../store/actions/thunks'\nimport * as Yup from \"yup\";\nimport {Container, Row, Col, InputGroup, Form} from 'react-bootstrap';\nimport MaskedInput from \"react-text-mask\";\nimport {transformPhone} from '../helpers/authHelpers'\nimport {authSelector} from \"../store/selectors\";\nimport { showAlert } from \"../store/actions/alerts.actions\";\nimport { checkValidity } from \"../api/authApi\";\n\n\ninterface FormValues {\n    phone: string;\n    password: string;\n}\n\nconst phoneNumberMask = [\n    \"(\",\n    /[1-10]/,\n    /\\d/,\n    /\\d/,\n    \")\",\n    \" \",\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    \"-\",\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/\n];\n\n\nexport const LogIn = ():JSX.Element => {\n    const dispatch = useDispatch()\n    const [phone, setPhone] = useState<string>(\"\")\n    const {token} = useSelector(authSelector)\n    let history = useHistory();\n\n    const initialValues: FormValues = {\n        phone: '',\n        password: '',\n    };\n\n    const validatePhone = (e: React.ChangeEvent<HTMLInputElement>, handleChange) => {\n        dispatch(checkPhone(phone))\n        handleChange(e)\n    }\n\n    const userSchema = Yup.object({\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n    })\n\n\n    const onChangePhone = (e: React.ChangeEvent<HTMLInputElement>): void => setPhone(e.target.value)\n\n    type User = Yup.InferType<typeof userSchema>;\n\n    async function onLogInUser(values) {\n        try {\n            if(values.phone) {\n                values.phone = transformPhone(values.phone)\n                const phone = await checkValidity('phone',values.phone);\n                console.log(values)\n                if(phone.valid) {\n                    dispatch(showAlert(\"Такого номера не існує в системі\", \"error\"))\n                }\n                dispatch(login(values))\n            }\n        } catch(e) {\n            dispatch(showAlert(\"Error\", \"error\"))\n            console.log(\"login error\", e)\n        }\n    }\n\n    if(token) {\n        history.push(\"/home\")\n        dispatch(showAlert(\"Вхід успішний!\", \"success\"))\n    }\n\n    return (\n        <section className=\"signup promo d-flex justify-content-center align-items-start pt-5\">\n            <Container>\n                <Row className=\"\">\n                    <Col lg={8} className=\"promo-col\">\n                        <p>\n                            <Link to=\"/\">\n                                Z-Helper\n                            </Link>\n                        </p>\n                    </Col>\n                    <Col lg={4} className=\"pt-5 mt-5\">\n                        <h1 className=\"mb-5\">Вхід</h1>\n                        <Formik\n                            initialValues={initialValues}\n                            validationSchema={userSchema}\n                            onSubmit={(values) => {\n                                onLogInUser(values)\n                            }}\n                            render={({ errors, status, values, touched, handleChange, handleSubmit }) => (\n                                <Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Row>\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPhone\">\n                                            <Form.Label>Номер телефону</Form.Label>\n                                            <InputGroup>\n                                                <div className=\"d-flex w-100 \">\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text id=\"inputGroupPrepend3\">\n                                                            <svg width=\"22\" height=\"24\" viewBox=\"0 0 22 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                <g clip-path=\"url(#clip0)\">\n                                                                    <path d=\"M21.2012 1.15363L16.7325 0.0286319C16.2469 -0.0932431 15.7485 0.183319 15.5508 0.680194L13.4883 5.93019C13.3079 6.38957 13.4282 6.92863 13.7848 7.24269L16.3887 9.56769C14.8419 13.163 12.1391 16.1536 8.77467 17.8739L6.64342 15.0333C6.35123 14.6443 5.86138 14.513 5.44029 14.7099L0.627791 16.9599C0.168026 17.1802 -0.0854899 17.7239 0.0262288 18.2536L1.05748 23.1286C1.1649 23.6349 1.5774 24.0005 2.06295 24.0005C13.0672 24.0005 22.0004 14.2739 22.0004 2.25051C22.0004 1.72551 21.6696 1.27082 21.2012 1.15363Z\" fill=\"#929292\" />\n                                                                </g>\n                                                                <defs>\n                                                                    <clipPath id=\"clip0\">\n                                                                        <rect width=\"22\" height=\"24\" fill=\"white\" />\n                                                                    </clipPath>\n                                                                </defs>\n                                                            </svg>\n                                                        </InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <MaskedInput\n                                                        mask={phoneNumberMask}\n                                                        id=\"phone\"\n                                                        name=\"phone\"\n                                                        className=\"input-number\"\n                                                        aria-describedby=\"inputGroupPrepend3\"\n                                                        placeholder=\"Ваш номер\"\n                                                        type=\"tel\"\n                                                        autoComplete=\"off\"\n                                                        value={phone}\n                                                        onFocus={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                        onBlur={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangePhone(e)}\n                                                        isInvalid={!!errors.phone}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        {errors.phone}\n                                                    </Form.Control.Feedback>\n                                                </div>\n\n                                            </InputGroup>\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <Form.Row>\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPassword\">\n                                            <Form.Label>Пароль</Form.Label>\n                                            <InputGroup>\n                                                <Form.Control\n                                                    type=\"password\"\n                                                    placeholder=\"Ваш пароль\"\n                                                    name=\"password\"\n                                                    autoComplete=\"off\"\n                                                    value={values.password}\n                                                    onChange={handleChange}\n                                                    isInvalid={!!errors.password}\n                                                />\n                                                <Form.Control.Feedback type=\"invalid\">\n                                                    {errors.password}\n                                                </Form.Control.Feedback>\n                                            </InputGroup>\n                                        </Form.Group>\n                                    </Form.Row>\n                                    <div className=\"form-group text-center\">\n                                        <button type=\"submit\" onSubmit={onLogInUser} className=\"btn btn-primary btn-register mr-2 py-2 px-5\">Увійти</button>\n                                        <p>Ще не маєш профілю?\n                                            <Link to=\"/\" className=\"ml-2\">\n                                                Створити\n                                            </Link>\n                                        </p>\n                                    </div>\n                                </Form>\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </section>\n    )\n}\n\nexport default LogIn;\n","/home/vlad/Front/zno-helper/src/pages/ResetPassword.tsx",["258"],"import React from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport {ErrorMessage, Field, Form, Formik, FormikValues} from \"formik\";\nimport * as Yup from \"yup\";\n\n\ninterface FormValues {\n    email: string;\n}\n\n\nfunction ResetPassword():JSX.Element {\n\n    const initialValues: FormValues = {\n        email: '',\n    };\n\n    const userSchema = Yup.object({\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n    })\n\n    type User = Yup.InferType<typeof userSchema>;\n\n    function onReset(values: FormikValues) {\n        console.log(values)\n    }\n\n    return (\n        <section className=\"reset d-flex justify-content-center align-items-start pt-5\">\n            <Container>\n                <Row className=\"\">\n                    <Col lg={8} className=\"promo-col\">\n                        <p>\n                            <Link to=\"/signup\">\n                                Z-Helper\n                            </Link>\n                        </p>\n                    </Col>\n                    <Col lg={4} className=\"pt-5 mt-5\">\n                        <h3 className=\"reset-title\">Відновлення паролю</h3>\n                        <Formik\n                            initialValues={initialValues}\n                            validationSchema={userSchema}\n                            onSubmit={(values, actions) => {\n                                onReset(values)\n                            }}\n                            render={({ errors, status, touched, handleChange, handleSubmit,\n                                         handleBlur, values }) => (\n                                <Form onSubmit={handleSubmit}>\n                                    <div className=\"form-group mt-5\">\n                                        <label htmlFor=\"email\">Електронна пошта</label>\n                                        <Field\n                                            name=\"email\"\n                                            type=\"text\"\n                                            value={values.email}\n                                            onChange={handleChange}\n                                            className={`form-control ${errors.email && touched.email && 'is-invalid'}`}/>\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                                    </div>\n                                    <div className=\"form-group text-center\">\n                                        <button type=\"submit\" className=\"btn btn-primary btn-register mr-2 px-5\">Надіслати</button>\n                                        <p>\n                                            Згадав пароль?\n                                            <Link to=\"/login\" className=\"ml-2\">\n                                                Увійти\n                                            </Link>\n                                        </p>\n                                    </div>\n\n                                </Form>\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n\n        </section>\n    )\n}\n\nexport default ResetPassword\n","/home/vlad/Front/zno-helper/src/pages/ChoiceSubjects.tsx",["259","260"],"import React, { useState} from 'react';\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport {Link} from \"react-router-dom\";\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\nimport 'swiper/swiper.scss';\nimport 'swiper/components/navigation/navigation.scss';\nimport 'swiper/components/pagination/pagination.scss';\nimport 'swiper/components/scrollbar/scrollbar.scss';\n\nimport ch from '../assets/images/chemistry mini.png'\nimport en from '../assets/images/english.png'\nimport ph from '../assets/images/physics.png'\n\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\n\n\nfunction Subjects():JSX.Element {\n    return (\n        <section className=\"subjects pt-5\">\n            <Container>\n                <Row className=\"text-center\">\n                    <Col xs=\"12\">\n                        <h3>Username вибери предмети для складання ЗНО</h3>\n                        <p>Ти будеш готуватись по цим предметах</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs=\"12\">\n                        <Swiper\n                            spaceBetween={50}\n                            slidesPerView={3}\n                            navigation\n                            scrollbar={{ draggable: true }}\n                            onSwiper={(swiper) => console.log(swiper)}\n                            onSlideChange={() => console.log('slide change')}\n                        >\n                            <SwiperSlide>\n                                <div className=\"text-uppercase d-flex flex-column align-items-center\">\n                                    <span className=\"\">Xімія</span>\n                                    <img className=\"img-fluid\" src={ch} alt=\"Chemistry\"/>\n                                </div>\n                            </SwiperSlide>\n                            <SwiperSlide>\n                                <div className=\"text-uppercase d-flex flex-column align-items-center\">\n                                    <span className=\"\">Анг.мова</span>\n                                    <img className=\"img-fluid\" src={en} alt=\"Chemistry\"/>\n                                </div>\n                            </SwiperSlide>\n                            <SwiperSlide>\n\n                                <div className=\"text-uppercase d-flex flex-column align-items-center\">\n                                    <span className=\"\">Фізика</span>\n                                    <img className=\"img-fluid\" src={en} alt=\"Chemistry\"/>\n                                </div>\n                            </SwiperSlide>\n                            <SwiperSlide>\n                                <div className=\"text-uppercase d-flex flex-column align-items-center\">\n                                    <span className=\"\">Анг.мова</span>\n                                    <img className=\"img-fluid\" src={en} alt=\"Chemistry\"/>\n                                </div>\n                            </SwiperSlide>\n                        </Swiper>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col lg={12} className=\"d-flex justify-content-center text-center align-items-center mt-5\">\n                        <div>\n                            <p>Вибрано 5/6</p>\n                            <Link to=\"/\" className=\"btn btn-primary btn-continue px-5 \">\n                                Продовжити\n                            </Link>\n                        </div>\n                    </Col>\n                </Row>\n            </Container>\n        </section>\n    )\n}\n\nexport default Subjects\n","/home/vlad/Front/zno-helper/src/pages/Tests.tsx",[],"/home/vlad/Front/zno-helper/src/pages/Test.tsx",["261"],"import React from 'react'\nimport { Col, Container, Row } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport Answer from '../components/Answer'\nimport Question from '../components/Question'\n\nfunction Test() {\n    return (\n        <section className=\"test d-flex align-items-center justify-content-center\">\n            <Container>\n                <Row>\n                    <Col lg={{ span: 10, offset: 2}}>\n                        <div className=\"text-center wrapper-test p-5\">\n                            <h1>Питання</h1>\n                            <h3>Тест по:</h3>\n                            <button className=\"btn btn-primary\">\n                                Розпочати\n                            </button>\n                            <Question />\n                            <Answer />\n                            <button className=\"NextStep\">\n                                 Далі\n                            </button>\n                            <div className=\"finalPage\">\n                                <h1>You have completed the quiz!</h1>\n                                <p>Your score is: </p>\n                                <p>Thank you!</p>\n                            </div>\n                        </div>\n\n                        \n                    </Col>\n                </Row>\n            </Container>\n        </section>\n    )\n}\n\nexport default Test\n","/home/vlad/Front/zno-helper/src/pages/Subjects.tsx",[],"/home/vlad/Front/zno-helper/src/pages/duel/DuelStart.tsx",["262","263","264","265","266","267","268"],"import React, { useState } from 'react';\nimport {Button, Col, Container, Jumbotron, Row} from 'react-bootstrap';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { Card, CardBody, Badge, Alert  } from 'shards-react'\nimport \"./Duel.scss\"\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        textAlign: \"center\",\n        '& .btn-copy': {\n            background: \"#EEF2FE\",\n            border: \"1px solid rgba(0, 0, 0, 0.1)\",\n            boxSizing: \"border-box\",\n            borderRadius: \"10px\",\n            fontStyle: \"normal\",\n            fontWeight: \"500\",\n            fontSize: \"22px\",\n            outline: \"none\",\n            color: \"#567BF3\"\n        },\n        '& .info-result': {\n            position: 'fixed',\n            top: '0',\n            right: '0'\n        }\n\n    },\n    main_container:{\n        top: \"162px\",\n        width: \"600px\",\n        left: \"660px\",\n    },\n    header_div:{\n        position: \"relative\",\n        height: \"auto\",\n        background: \"#FFFFFF\",\n        boxShadow: \"0px 2px 6px rgba(61, 61, 61, 0.04)\",\n        borderRadius: \"15px\",\n        padding: \"10px 15px\",\n        borderLeft: \"3px solid #567BF3\",\n        marginBottom: \"50px\"\n    },\n    duel_h1:{\n        fontStyle: \"normal\",\n        fontWeight: \"normal\",\n        fontSize: \"36px\",\n        lineHeight: \"44px\",\n        color: \"#6B8CBE\",\n    },\n    button_copy: {\n        padding: \"15px 45px\",\n        textAlign: \"center\",\n        margin: \"0 auto\",\n        display: \"block\",\n        background: \"#EEF2FE\",\n        border: \"1px solid rgba(0, 0, 0, 0.1)\",\n        borderRadius: \"10px\",\n        fontWeight: 500,\n        fontSize: \"22px\",\n        color: \"#567BF3\",\n        marginBottom: \"50px\"\n    },\n    button_main: {\n        padding: \"15px 45px\",\n        borderRadius: \"15px\",\n        fontSize: \"26px\",\n        color: \"#fff\",\n        textAlign: \"center\",\n        margin: \"0 auto\",\n        display: \"block\",\n    },\n    convas:{\n        marginTop: \"100px\",\n        background: \"rgba(8, 142, 167, 0.8)\",\n        boxShadow: \"0px 2px 6px rgba(61, 61, 61, 0.04)\",\n        borderRadius:\" 15px\",\n        width: \"100%\",\n        height: \"200px\",\n        color: \"rgba(255, 255, 255, 0.8)\",\n        fontSize: \"36px\",\n        textAlign: \"center\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    convas_body: {\n        flex: \"none\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    participant: {\n        background: \"rgba(238, 242, 254, 0.8)\",\n        border: \"1px solid rgba(0, 0, 0, 0.1)\",\n        boxSizing: \"border-box\",\n        borderRadius: \"10px\",\n        fontSize: \"20px\",\n        color: \"#567BF3\",\n        padding: \"10px 20px\",\n        margin: \"5px\",\n        display: \"flex\",\n        \"&:hover\": {\n            background: \"#EEF2FE\",\n            border: \"1px solid rgba(0, 0, 0, 0.1)\",\n            borderRadius: \"10px\",\n            color: \"#F44336\",\n            textDecoration: \"none\"\n        },\n    }\n}));\n\nfunction DuelStart():JSX.Element {\n    const classes = useStyles();\n    const [copySuccess, setCopySuccess] = useState<string>('');\n\n\n    const copyLink = () => {\n        const link = navigator.clipboard.writeText('Copy this text to clipboard')\n        // setCopySuccess(link)\n    };\n\n    return (\n        <section className=\"duel\">\n            <Container className={classes.main_container}>\n                <div className={classes.header_div}>\n                     <h1 className={classes.duel_h1}>Географія як наука, розвиток географічних досліджень</h1>\n                </div>\n\n                <button className={classes.button_copy} onClick={copyLink}>\n                    Копіювати посилання для дуелі\n                </button>\n\n                <Button className={classes.button_main}>Розпочати Дуель</Button>\n\n                <Row>\n                    <Card className={classes.convas}>\n                            <CardBody className={classes.convas_body}>\n                                <p hidden={false}>Очікуються інші учасники...</p>\n                                {/*<a className={classes.participant}  href={\"http://localhost:3000/duel/remove\"}>Vasia Petrovych</a>*/}\n                                {/*<a className={classes.participant} href={\"http://localhost:3000/duel/remove\"}>Vasia Petrovych</a>*/}\n                                {/*<a className={classes.participant} href={\"http://localhost:3000/duel/remove\"}>Vasia Petrovych</a>*/}\n                                {/*<a className={classes.participant} href={\"http://localhost:3000/duel/remove\"}>Vasia Petrovych</a>*/}\n                            </CardBody>\n                    </Card>\n                </Row>\n\n                {/*<Row>*/}\n                {/*    <Col lg={{span: 10 }}>*/}\n                {/*        <Jumbotron className={classes.root}>*/}\n                {/*            <h1>Географія як наука, розвиток географічних досліджень</h1>*/}\n                {/*            <p>*/}\n                {/*                <button*/}\n                {/*                    className=\"btn-copy p-3\"*/}\n                {/*                    onClick={copyLink}*/}\n                {/*                >*/}\n                {/*                    Копіювати посилання для дуелі*/}\n                {/*                </button>*/}\n                {/*            </p>*/}\n                {/*            <p>*/}\n                {/*                <Button disabled variant=\"primary\">Розпочати Дуель</Button>*/}\n                {/*            </p>*/}\n                {/*            /!*<span>{copySuccess}</span>*!/*/}\n                {/*            {copySuccess && \"Есть\"}*/}\n                {/*        </Jumbotron>*/}\n                {/*    </Col>*/}\n                {/*</Row>*/}\n\n                {/*<Row>*/}\n                {/*    <Col lg={{span: 6, offset: 2 }}>*/}\n                {/*        <Card className=\"text-center\">*/}\n                {/*            <CardBody>*/}\n                {/*                Очікуються інші учасники...*/}\n                {/*            </CardBody>*/}\n                {/*        </Card>*/}\n                {/*    </Col>*/}\n                {/*</Row>*/}\n\n                {/*<Row className={classes.root}>*/}\n                {/*    <Col className=\"text-center\" lg={{span: 6, offset: 2}}>*/}\n                {/*        <QuestionCard/>*/}\n                {/*        <Button className=\"mt-3\">Далі</Button>*/}\n                {/*    </Col>*/}\n                {/*    <div className=\"info-result\">*/}\n                {/*        <Card>*/}\n                {/*            <CardBody>*/}\n                {/*                <Alert theme=\"warning\">*/}\n                {/*                    Sviatossss:*/}\n                {/*                    4*/}\n                {/*                </Alert>*/}\n                {/*                <Alert theme=\"info\">*/}\n                {/*                    Vladoss:*/}\n                {/*                    3*/}\n                {/*                </Alert>*/}\n                {/*                <Alert theme=\"dark\">*/}\n                {/*                    Yurets:*/}\n                {/*                    2*/}\n                {/*                </Alert>*/}\n                {/*            </CardBody>*/}\n                {/*        </Card>*/}\n                {/*    </div>*/}\n\n                {/*</Row>*/}\n\n            </Container>\n        </section>\n\n    )\n}\n\nexport default DuelStart;\n","/home/vlad/Front/zno-helper/src/pages/duel/DuelJoin.tsx",["269","270","271","272","273","274","275","276","277"],"import React, { useState } from 'react';\nimport {Button, Col, Container, Jumbotron, Row} from 'react-bootstrap';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { Card, CardBody, Badge, Alert  } from 'shards-react'\nimport \"./Duel.scss\"\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n\n        textAlign: \"center\",\n        '& .btn-copy': {\n            background: \"#EEF2FE\",\n            border: \"1px solid rgba(0, 0, 0, 0.1)\",\n            boxSizing: \"border-box\",\n            borderRadius: \"10px\",\n            fontStyle: \"normal\",\n            fontWeight: \"500\",\n            fontSize: \"22px\",\n            outline: \"none\",\n            color: \"#567BF3\"\n        },\n        '& .info-result': {\n            position: 'fixed',\n            top: '0',\n            right: '0'\n        }\n\n    },\n}));\n\nfunction DuelJoin():JSX.Element {\n    const classes = useStyles();\n\n    return (\n        <section className=\"duel\">\n            <Container className=\"main_container_600\">\n                <div className=\"header_div\">\n                     <h1 className=\"duel_h1\">Географія як наука, розвиток географічних досліджень</h1>\n                </div>\n\n                <div className=\"invite_by\">Запросив у дуель: <span>Sviatosss</span></div>\n\n                <input className=\"participant_name\" name=\"participant\" type=\"text\" placeholder=\"Введіть ваше ім’я\"/>\n\n                <Button disabled className=\"button_main\">Долучитись</Button>\n\n            </Container>\n        </section>\n\n    )\n}\n\nexport default DuelJoin;\n","/home/vlad/Front/zno-helper/src/pages/duel/DuelTest.tsx",["278","279","280","281","282","283"],"import React, { useState } from 'react';\nimport {Button, Col, Container, Jumbotron, Row} from 'react-bootstrap';\nimport \"./Duel.scss\"\n\nimport {SingleAnswer} from \"./test_templates/SingleAnswer\";\nimport {MultiAnswer} from \"./test_templates/MultiAnswer\";\nimport {Boolean} from \"./test_templates/Boolean\";\n\nfunction DuelTest():JSX.Element {\n    return (\n        <section className=\"duel\">\n            <Container className=\"main_container_850\">\n                <div className=\"header_div\">\n                     <h1 className=\"duel_h1\">Що спричиняє заболочування на великих площах у басейні річки Амазонки?</h1>\n                </div>\n\n                {/* <SingleAnswer /> */}\n\n                {/* <MultiAnswer /> */}\n\n                <Boolean />\n\n                <Button  className=\"button_main\">Далі</Button>\n\n            </Container>\n        </section>\n    )\n}\n\nexport default DuelTest;\n","/home/vlad/Front/zno-helper/src/pages/CreateTests.tsx",["284","285","286","287","288","289","290"],"/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateBooleanAnswer.tsx",["291"],"import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport {Card, CardBody, CardHeader,FormSelect, Collapse } from \"shards-react\";\nimport {OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport { TestProps } from '../../utils/interfaces';\nimport Delete from '../svg/Delete';\nimport TypePicker from './template-components/TypePicker';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                // display: 'block',\n                margin: '5px 0',\n                width: '90%',\n                '& .MuiInputBase-root': {\n                    // display: 'block',\n\n                    '& .MuiOutlinedInput-input': {\n                        // padding: '20px 0px 15px 15px',\n                    }\n                }\n            }\n        }\n    }),\n);\n\nexport default function CreateBooleanAnswer({test,removeTest,changeCollapseState,testIndex,changeExplanation,changeTitle, changeMode, tests, updateTests }:TestProps):JSX.Element {\n    const classes = useStyles();\n\n    const toggle = () => {\n        changeCollapseState(test.id)\n    }\n    const changeTestTitle = (title: string) => changeTitle(test.id, title)\n    const changeTestExplanation = (explanation: string) => changeExplanation(test.id, explanation)\n    const changeTestState = (value: boolean) => {\n        let newTests = [...tests]\n        tests[testIndex].content.answer = value\n        updateTests(newTests)\n    }\n    const deleteTest = () => removeTest(test.id)\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <div>\n                        <h5>\n                            <svg onClick={toggle} style={{cursor: 'pointer'}} className=\"mr-3\" width=\"16\" height=\"14\" viewBox=\"0 0 16 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M8 0L15.7942 13.5L0.205771 13.5L8 0Z\" fill=\"#DADADA\"/>\n                            </svg>\n                            Запитання {testIndex + 1}\n                        </h5>\n                    </div>\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <TypePicker\n                        changeMode={changeMode}\n                            currentType={test.content.type}\n                            testIndex={testIndex}\n                        />\n\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити Запитання {testIndex + 1}</Tooltip>}>\n                            <p className=\"ml-3 delete\">\n                            <Delete click={deleteTest} />          \n                            </p>\n                        </OverlayTrigger>\n\n                    </div>\n\n                </div>\n            </CardHeader>\n            <Collapse open={test.collapsed}>\n                <CardBody className=\"question-input\">\n                    <div className=\"w-100\">\n                        <TextField\n                            className=\"d-flex\"\n                            id=\"outlined-search\"\n                            label=\"Напишіть ваше запитанння тут\"\n                            onChange={e => changeTestTitle(e.target.value)}\n                            type=\"text\"\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n                <CardBody className=\"question-input\">\n                    <div className={classes.root}>\n                        <form className=\"boolean-answer d-flex justify-content-around\">\n                            <div onClick={ () => changeTestState(true)}>\n                                <input type=\"radio\" id=\"test_option_1\" className=\"boolean\"\n                                       name=\"boolean\" value=\"true\"/>\n                                <label htmlFor=\"test_option_1\" className=\"p-4\">\n                                    Твердження вірне\n                                </label>\n                            </div>\n                            <div onClick={() => changeTestState(false)}>\n                                <input type=\"radio\" id=\"test_option_2\" className=\"boolean\"\n                                       name=\"boolean\" value=\"false\"/>\n                                <label htmlFor=\"test_option_2\" className=\"p-4\">\n                                    Твердження не вірне\n                                </label>\n                            </div>\n                        </form>\n                    </div>\n\n                </CardBody>\n                <CardBody>\n                    <div className={classes.root} >\n                        <TextField\n                            id=\"outlined-multiline-static\"\n                            label=\"Напишіть пояснення\"\n                            onChange={e => changeTestExplanation(e.target.value)}\n                            multiline\n                            rows={2}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n            </Collapse>\n\n        </Card>\n    )\n}\n","/home/vlad/Front/zno-helper/src/components/SubjectCart.tsx",[],"/home/vlad/Front/zno-helper/src/components/ThemeCart.tsx",["292"],"import React, {FC} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n    Col,\n    Card,\n    CardHeader,\n    CardTitle,\n    CardImg,\n    CardBody,\n    CardFooter,\n    Button\n} from \"shards-react\";\n\ninterface Props {\n    theme: any\n}\n\nexport const ThemeCart:FC<Props> = ({theme}) => {\n    return (\n        <Col lg=\"3\" className=\"my-3\">\n            <Card className=\"mt-3\">\n                <CardImg src=\"https://source.unsplash.com/user/erondu/300x200\" className=\"img-fluid\" />\n                <CardBody>\n                    <CardTitle>{theme.title}</CardTitle>\n                    <p>{theme.descr}</p>\n                    <Button>\n                        <Link to=\"/test/2\">\n                            Пройти Тест\n                        </Link>\n                    </Button>\n                </CardBody>\n                <CardFooter>Card footer</CardFooter>\n            </Card>\n        </Col>\n    );\n}\n","/home/vlad/Front/zno-helper/src/components/Answer.tsx",[],"/home/vlad/Front/zno-helper/src/components/Question.tsx",[],"/home/vlad/Front/zno-helper/src/components/CodeInput.tsx",[],"/home/vlad/Front/zno-helper/src/pages/duel/test_templates/Boolean.tsx",[],"/home/vlad/Front/zno-helper/src/api/authApi.ts",[],"/home/vlad/Front/zno-helper/src/utils/axios.ts",["293"],"import BaseAxios from \"axios\";\nimport jwtDecode , {JwtPayload} from \"jwt-decode\";\nimport { BASE_URL, BASE_TEST_URL } from \"../api/config\";\n\nexport const axios = BaseAxios.create({ baseURL: BASE_URL })\nexport const testAPi = BaseAxios.create({baseURL: BASE_TEST_URL})\nconst whiteList = ['auth',]\n\nconst inWhiteList = (url: string): boolean => {\n    const match = whiteList.find((i) => url.includes(i))\n    return !!match\n}\n    \nconst tokenValid = (token?: string): boolean => {\n    if(!token) return false\n    try {\n        const currentDate = new Date()\n        const { exp }: JwtPayload = jwtDecode(token)\n        if(exp === undefined) return false\n        return !(exp * 1000 < currentDate.getTime())\n    } catch (error) {\n        return false\n    }\n}\n\naxios.interceptors.request.use(\n    async (request) => {\n        if (!inWhiteList(request.url ?? '')) {\n            const newRequest = { ...request }\n            return newRequest\n        }\n\n        return request\n    },\n    (error) => {\n        return Promise.reject(error)\n    },\n)\n\naxios.interceptors.response.use(\n    (response) => {\n        return response.data\n    },\n    async (error) => {\n        // const { token } = store.getState().login\n        if (\n            error &&\n            error.response &&\n            (error.response.status === 401 || error.response.status === 403)\n            // && token\n        ) {\n            // eslint-disable-next-line no-void\n            // void store.dispatch(doLogout())\n            return null\n        }\n        return Promise.reject(error)\n    },\n)\n\ntestAPi.interceptors.response.use(\n    (response) => {\n        return response.data\n    },\n    async (error) => {\n        // const { token } = store.getState().login\n        if (\n            error &&\n            error.response &&\n            (error.response.status === 401 || error.response.status === 403)\n            // && token\n        ) {\n            // eslint-disable-next-line no-void\n            // void store.dispatch(doLogout())\n            return null\n        }\n        return Promise.reject(error)\n    },\n)\n","/home/vlad/Front/zno-helper/src/api/config.ts",[],"/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateSingleAnswer.tsx",["294","295","296","297"],"import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport { Card, CardBody, CardHeader, Button, FormSelect, Collapse } from \"shards-react\";\nimport { Col, Container, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { TestProps } from '../../utils/interfaces';\nimport Delete from '../svg/Delete';\nimport SingleSelect from '../svg/SingleSelect';\nimport TypePicker from './template-components/TypePicker';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                // display: 'block',\n                width: '90%',\n\n                '&:hover ~ .svg': {\n                    fill: '#fff !important',\n                },\n                '& .MuiInputBase-root': {\n                    // display: 'block',\n\n                    '& .MuiInputBase-input': {\n\n                    },\n\n                    '& .MuiOutlinedInput-input': {\n                        // padding: '20px 0px 15px 15px',\n                    }\n                }\n            }\n        }\n    }),\n);\n\n\nconst OptionContent = ({ text, selected, idx, setOptionText, numOfQuestions, changeSelection, removeOption }): JSX.Element => (\n    <p className=\"d-flex align-items-center justify-content-between\">\n        <SingleSelect click={() => changeSelection(idx)} active={selected} />\n        <TextField\n            className=\"answer__input\"\n            id=\"outlined-search\"\n            label={`Варіант відповіді ${idx + 1}`}\n            type=\"text\"\n            value={text}\n            onChange={(e) => setOptionText(e.target.value, idx)}\n            variant=\"outlined\"\n            size=\"small\"\n        />\n\n        { numOfQuestions > 2 && <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити варіант відповіді</Tooltip>}>\n            <Delete click={() => removeOption(idx)} />\n        </OverlayTrigger>}\n    </p>\n)\n\nexport default function CreateSingleAnswer({ test, removeTest, changeCollapseState, testIndex, changeExplanation, changeTitle, tests, updateTests, changeMode }: TestProps): JSX.Element {\n    const classes = useStyles();\n\n    const toggle = () => {\n        changeCollapseState(test.id)\n    }\n    const handleOptionTextUpdate = (text: string, qIdx: number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        const updatedTestQuestions = testToUpdateQuestions.map((q, idx) => qIdx === idx ? ({ ...q, text }) : q)\n        newTests[testIndex].content.options = updatedTestQuestions\n        updateTests(newTests)\n    }\n\n\n    const handleOptionSelectionUpdate = (qIdx: number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        const updatedTestQuestions = testToUpdateQuestions.map((q, idx) => ({ ...q, selected: qIdx === idx ? !q.selected : false }))\n        newTests[testIndex].content.options = updatedTestQuestions\n        newTests[testIndex].content.answer = updatedTestQuestions[qIdx].text\n        const newSelectionState = newTests[testIndex].content.options[qIdx].selected\n        const optionText = newTests[testIndex].content.options[qIdx].text\n        const answerText = newTests[testIndex].content.answer\n        console.log(optionText, answerText)\n        if (!newSelectionState && optionText === answerText) {\n            newTests[testIndex].content.options[qIdx].answer = ''\n        }\n        updateTests(newTests)\n    }\n\n    const handleDeleteOption = (qIdx: number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        console.log('testTOuPD', testToUpdateQuestions, qIdx)\n        const optionText = newTests[testIndex].content.options[qIdx].text\n        const updatedTestQuestions = testToUpdateQuestions.filter((_, idx) => qIdx !== idx)\n        newTests[testIndex].content.options = updatedTestQuestions\n        if (optionText === newTests[testIndex].content.answer) {\n            newTests[testIndex].content.answer = ''\n        }\n        updateTests(newTests)\n\n    }\n\n    const handleAddOption = () => {\n        let newTests = [...tests]\n        console.log('tests', newTests, testIndex)\n        newTests[testIndex].content.options.push({ text: '', selected: false })\n        updateTests(newTests)\n    }\n\n    const deleteTest = () => removeTest(test.id)\n    const changeTestTitle = (title: string) => changeTitle(test.id, title)\n    const changeTestExplanation = (explanation: string) => changeExplanation(test.id, explanation)\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <div>\n                        <h5>\n                            <svg onClick={toggle} style={{ cursor: 'pointer' }} className=\"mr-3\" width=\"16\" height=\"14\" viewBox=\"0 0 16 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M8 0L15.7942 13.5L0.205771 13.5L8 0Z\" fill=\"#DADADA\" />\n                            </svg>\n                            Запитання {testIndex + 1}\n                        </h5>\n                    </div>\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <TypePicker\n                            changeMode={changeMode}\n                            currentType={test.content.type}\n                            testIndex={testIndex}\n                        />\n\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити Запитання {testIndex + 1}</Tooltip>}>\n                            <p className=\"ml-3 delete\">\n                                <Delete click={deleteTest} />\n                            </p>\n                        </OverlayTrigger>\n\n                    </div>\n\n                </div>\n            </CardHeader>\n            <Collapse open={test.collapsed}>\n                <CardBody className=\"question-input\">\n                    <div className=\"w-100\">\n                        <TextField\n                            className=\"d-flex\"\n                            id=\"outlined-search\"\n                            label=\"Напишіть ваше запитанння тут\"\n                            type=\"text\"\n                            variant=\"outlined\"\n                            onChange={(e) => changeTestTitle(e.target.value)}\n                        />\n                    </div>\n                </CardBody>\n                <CardBody className=\"question-input\">\n                    <div className={classes.root}>\n                        {\n                            test.content.options.map(\n                                ({ text, selected }, idx, array) =>\n                                    <OptionContent\n                                        idx={idx}\n                                        text={text}\n                                        selected={selected}\n                                        setOptionText={handleOptionTextUpdate}\n                                        numOfQuestions={array.length}\n                                        changeSelection={handleOptionSelectionUpdate}\n                                        removeOption={handleDeleteOption}\n                                    />\n                            )\n                        }\n                    </div>\n                    <Button onClick={handleAddOption} className=\"btn-add d-flex align-items-center\" theme=\"light\">\n                        <svg className=\"mr-2\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.05209 0C6.4272 0 5.92063 0.506569 5.92063 1.13145V5H1.26336C0.711071 5 0.263355 5.44771 0.263355 6C0.263355 6.55228 0.711071 7 1.26336 7H5.92063V10.8685C5.92063 11.4934 6.4272 12 7.05209 12C7.67697 12 8.18354 11.4934 8.18354 10.8685V7H12.8408C13.3931 7 13.8408 6.55228 13.8408 6C13.8408 5.44772 13.3931 5 12.8408 5H8.18354V1.13145C8.18354 0.50657 7.67697 0 7.05209 0Z\" fill=\"#567BF3\" />\n                        </svg>\n                        Додати ще один варіант\n                    </Button>\n                </CardBody>\n                <CardBody>\n                    <div className={classes.root} >\n                        <TextField\n                            id=\"outlined-multiline-static\"\n                            label=\"Напишіть пояснення\"\n                            multiline\n                            rows={2}\n                            variant=\"outlined\"\n                            onChange={e => changeTestExplanation(e.target.value)}\n                        />\n                    </div>\n                </CardBody>\n            </Collapse>\n        </Card>\n\n    )\n}\n","/home/vlad/Front/zno-helper/src/pages/Subject.tsx",[],"/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateMultiAnswer.tsx",["298","299"],"import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport {Card, CardBody, CardHeader, Button,FormSelect, Collapse } from \"shards-react\";\nimport {OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport { TestProps } from '../../utils/interfaces';\nimport Delete from '../svg/Delete';\nimport MultiSelect from '../svg/MultiSelect';\nimport TypePicker from './template-components/TypePicker';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                // display: 'block',\n                margin: '5px 0',\n                width: '90%',\n                '& .MuiInputBase-root': {\n                    // display: 'block',\n\n                    '& .MuiOutlinedInput-input': {\n                        // padding: '20px 0px 15px 15px',\n                    }\n                }\n            }\n        }\n    }),\n);\n\nconst MultiOption = ({text,selected,idx,setOptionText,numOfQuestions,changeSelection,removeOption}) => (\n    <p className=\"d-flex align-items-center justify-content-between\">\n    <MultiSelect click={() => changeSelection(idx)} active={selected} />\n    <TextField\n        id=\"outlined-search\"\n        label={`Варіант відповіді ${idx + 1}`}\n        onChange={e => setOptionText(e.target.value,idx)}\n        value={text}\n        type=\"text\"\n        variant=\"outlined\"\n        size=\"small\"\n    />\n        { numOfQuestions > 3 && <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити варіант відповіді</Tooltip>}>\n            <Delete click={() => removeOption(idx)} />\n    </OverlayTrigger>}\n</p>\n\n\n)\n\n\nexport default function CreateMultiAnswer({test,removeTest,changeCollapseState,testIndex,changeExplanation,changeTitle, changeMode, tests, updateTests }:TestProps):JSX.Element {\n    const classes = useStyles();\n\n    const toggle = () => {\n       changeCollapseState(test.id)\n    }\n\n    const deleteTest = () => removeTest(test.id)\n    const changeTestTitle = (title: string) => changeTitle(test.id, title)\n    const changeTestExplanation = (explanation: string) => changeExplanation(test.id, explanation)\n    const handleOptionTextUpdate = (text:string,qIdx:number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        const updatedTestQuestions = testToUpdateQuestions.map((q, idx) => qIdx === idx ? ({ ...q, text }) : q)\n        newTests[testIndex].content.options = updatedTestQuestions\n        updateTests(newTests)\n    }\n\n\n    const handleOptionSelectionUpdate = (qIdx: number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        const updatedTestQuestions = testToUpdateQuestions.map((q, idx) => ({ ...q, selected: qIdx === idx ? !q.selected : q.selected }))\n        newTests[testIndex].content.options = updatedTestQuestions\n        updateTests(newTests)\n    }\n\n    const handleDeleteOption = (qIdx: number) => {\n        let newTests = [...tests]\n        const testToUpdateQuestions = newTests[testIndex].content.options\n        const optionText = newTests[testIndex].content.options[qIdx].text\n        const updatedTestQuestions = testToUpdateQuestions.filter((_, idx) => qIdx !== idx)\n        newTests[testIndex].content.options = updatedTestQuestions\n        updateTests(newTests)\n\n    }\n\n    const handleAddOption = () => {\n        let newTests = [...tests]\n        console.log('tests',newTests,testIndex)\n        newTests[testIndex].content.options.push({ text: '', selected: false })\n        updateTests(newTests)\n    }\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <div>\n                        <h5>\n                            <svg onClick={toggle} style={{cursor: 'pointer'}} className=\"mr-3\" width=\"16\" height=\"14\" viewBox=\"0 0 16 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M8 0L15.7942 13.5L0.205771 13.5L8 0Z\" fill=\"#DADADA\"/>\n                            </svg>\n                            Запитання {testIndex + 1}\n                        </h5>\n                    </div>\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <TypePicker\n                        changeMode={changeMode}\n                            currentType={test.content.type}\n                            testIndex={testIndex}\n                        />\n\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити Запитання {testIndex + 1}</Tooltip>}>\n                            <p className=\"ml-3 delete\">\n                            <Delete click={deleteTest} />\n                            </p>\n                        </OverlayTrigger>\n\n                    </div>\n\n                </div>\n            </CardHeader>\n            <Collapse open={test.collapsed}>\n                <CardBody className=\"question-input\">\n                    <div className=\"w-100\">\n                        <TextField\n                            className=\"d-flex\"\n                            id=\"outlined-search\"\n                            label=\"Напишіть ваше запитанння тут\"\n                            onChange={e => changeTestTitle(e.target.value)}\n                            type=\"text\"\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n                <CardBody className=\"question-input\">\n                    <div className={classes.root}>\n                    {\n                        test.content.options.map(\n                            ({ text, selected }, idx, array) =>\n                                <MultiOption\n                                    idx={idx}\n                                    text={text}\n                                    selected={selected}\n                                    setOptionText={handleOptionTextUpdate}\n                                    numOfQuestions={array.length}\n                                    changeSelection={handleOptionSelectionUpdate}\n                                    removeOption={handleDeleteOption}\n                                />\n                        )\n                    }\n                    </div>\n                    <Button onClick={handleAddOption} className=\"btn-add d-flex align-items-center\" theme=\"light\">\n                        <svg className=\"mr-2\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.05209 0C6.4272 0 5.92063 0.506569 5.92063 1.13145V5H1.26336C0.711071 5 0.263355 5.44771 0.263355 6C0.263355 6.55228 0.711071 7 1.26336 7H5.92063V10.8685C5.92063 11.4934 6.4272 12 7.05209 12C7.67697 12 8.18354 11.4934 8.18354 10.8685V7H12.8408C13.3931 7 13.8408 6.55228 13.8408 6C13.8408 5.44772 13.3931 5 12.8408 5H8.18354V1.13145C8.18354 0.50657 7.67697 0 7.05209 0Z\" fill=\"#567BF3\"/>\n                        </svg>\n                        Додати ще один варіант\n                    </Button>\n                </CardBody>\n                <CardBody>\n                    <div className={classes.root} >\n                        <TextField\n                            id=\"outlined-multiline-static\"\n                            label=\"Напишіть пояснення\"\n                            onChange={e => changeTestExplanation(e.target.value)}\n                            multiline\n                            rows={2}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n            </Collapse>\n        </Card>\n    )\n}\n","/home/vlad/Front/zno-helper/src/components/create-test-templates/CreateAccordenceAnswer.tsx",["300"],"import React from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport {Card, CardBody, CardHeader, Button,FormSelect,Collapse } from \"shards-react\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {OverlayTrigger, Tooltip} from \"react-bootstrap\";\nimport { TestProps } from '../../utils/interfaces';\nimport Delete from '../svg/Delete';\nimport TypePicker from './template-components/TypePicker';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            '& .MuiTextField-root': {\n                // display: 'block',\n                margin: '5px 0',\n                width: '90%',\n                '& .MuiInputBase-root': {\n                    // display: 'block',\n\n                    '& .MuiOutlinedInput-input': {\n                        // padding: '20px 0px 15px 15px',\n                    }\n                }\n            }\n        }\n    }),\n);\n\nexport default function CreateaccordanceAnswer({test,removeTest,changeCollapseState,testIndex, changeExplanation, changeTitle, changeMode,tests, updateTests  }:TestProps):JSX.Element {\n    const classes = useStyles();\n    console.log('test from acc',test)\n    const toggle = () => {\n        changeCollapseState(test.id)\n    }\n    const changeTestTitle = (title: string) => changeTitle(test.id, title)\n    const changeTestExplanation = (explanation: string) => changeExplanation(test.id, explanation)\n    const handleAddAccordance = () => {\n        let newTests = [...tests]\n        newTests[testIndex].content.accordancies[0].push('')\n        newTests[testIndex].content.accordancies[1].push('')\n        updateTests(newTests)\n    }\n\n    const handleSetAccordance = (text:string,col:number,idx:number) => {\n        let newTests = [...tests]\n        newTests[testIndex].content.accordancies[col][idx] = text\n        updateTests(newTests)\n    }\n    const deleteTest = () => removeTest(test.id)\n\n    return (\n        <Card>\n            <CardHeader>\n                <div className=\"d-flex align-items-baseline justify-content-between\">\n                    <div>\n                        <h5>\n                            <svg onClick={toggle} style={{cursor: 'pointer'}} className=\"mr-3\" width=\"16\" height=\"14\" viewBox=\"0 0 16 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M8 0L15.7942 13.5L0.205771 13.5L8 0Z\" fill=\"#DADADA\"/>\n                            </svg>\n                            Запитання {testIndex + 1}\n                        </h5>\n                    </div>\n                    <div className=\"d-flex align-items-baseline justify-content-between\">\n                        <TypePicker\n                        changeMode={changeMode}\n                            currentType={test.content.type}\n                            testIndex={testIndex}\n                        />\n                        <OverlayTrigger overlay={<Tooltip id=\"tooltip-disabled\">Видалити Запитання {testIndex + 1}</Tooltip>}>\n                            <p className=\"ml-3 delete\">\n                                <Delete click={deleteTest} />\n                            </p>\n                        </OverlayTrigger>\n\n                    </div>\n\n                </div>\n            </CardHeader>\n\n            <Collapse open={test.collapsed}>\n                <CardBody className=\"question-input\">\n                    <div className=\"w-100\">\n                        <TextField\n                            className=\"d-flex\"\n                            id=\"outlined-search\"\n                            label=\"Напишіть ваше запитанння тут\"\n                            onChange={e => changeTestTitle(e.target.value)}\n                            type=\"text\"\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n                <CardBody className=\"question-input\">\n                    <div className={classes.root}>\n                        <form className=\" d-flex justify-content-around\">\n                            <div>\n                                {\n                                    test?.content?.accordancies[0]?.map(\n                                        (el, idx) => <TextField\n                                        key={idx+''}\n                                        id=\"outlined-search\"\n                                        onChange={(e) => handleSetAccordance(e.target.value,0,idx)}\n                                        label={`Відповідність ${idx + 1}`}\n                                        type=\"text\"\n                                        value={el}\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                    />\n                                    )\n                                }\n                            </div>\n\n                            <div>\n                            {\n                                    test?.content?.accordancies[1]?.map(\n                                        (el,idx) =>  <TextField\n                                        id=\"outlined-search\"\n                                        key={idx+''}\n                                        onChange={(e) => handleSetAccordance(e.target.value,1,idx)}\n                                        label={`Відповідність ${idx + 1}`}\n                                        type=\"text\"\n                                        value={el}\n                                        variant=\"outlined\"\n                                        size=\"small\"\n                                    />\n                                    )\n                                }\n\n                            </div>\n                        </form>\n                    </div>\n                    <Button onClick={handleAddAccordance} className=\"btn-add mt-3 d-flex align-items-center\" theme=\"light\">\n                        <svg className=\"mr-2\" width=\"14\" height=\"12\" viewBox=\"0 0 14 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.05209 0C6.4272 0 5.92063 0.506569 5.92063 1.13145V5H1.26336C0.711071 5 0.263355 5.44771 0.263355 6C0.263355 6.55228 0.711071 7 1.26336 7H5.92063V10.8685C5.92063 11.4934 6.4272 12 7.05209 12C7.67697 12 8.18354 11.4934 8.18354 10.8685V7H12.8408C13.3931 7 13.8408 6.55228 13.8408 6C13.8408 5.44772 13.3931 5 12.8408 5H8.18354V1.13145C8.18354 0.50657 7.67697 0 7.05209 0Z\" fill=\"#567BF3\"/>\n                        </svg>\n                        Додати ще одну відповідність\n                    </Button>\n\n                </CardBody>\n                <CardBody>\n                    <div className={classes.root} >\n                        <TextField\n                            id=\"outlined-multiline-static\"\n                            label=\"Напишіть пояснення\"\n                            onChange={e => changeTestExplanation(e.target.value)}\n                            multiline\n                            rows={2}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </CardBody>\n            </Collapse>\n        </Card>\n    )\n}\n","/home/vlad/Front/zno-helper/src/utils/interfaces.ts",[],["301","302"],"/home/vlad/Front/zno-helper/src/components/SideBar/SideBar.tsx",["303","304","305","306","307","308","309","310"],"import React, { useState } from \"react\";\nimport {\n    ProSidebar,\n    Menu,\n    MenuItem,\n    SidebarHeader,\n    SidebarFooter,\n    SidebarContent,\n} from \"react-pro-sidebar\";\nimport { useSelector } from 'react-redux'\nimport { FaList, FaRegHeart, FaUserFriends } from \"react-icons/fa\";\nimport {FiHome, FiLogOut, FiArrowLeftCircle, FiArrowRightCircle, FiSettings} from \"react-icons/fi\";\nimport { RiPencilLine } from \"react-icons/ri\";\nimport {BiCog, BiHomeAlt} from \"react-icons/bi\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport \"./SideBar.scss\";\nimport { Link } from 'react-router-dom';\nimport {AiOutlineUserAdd, MdExitToApp} from \"react-icons/all\";\nimport { authSelector } from \"../../store/selectors\";\n\n\nexport default function SideBar():JSX.Element {\n    const [menuCollapse, setMenuCollapse] = useState(false)\n    const menuIconClick = () => {\n        menuCollapse ? setMenuCollapse(false) : setMenuCollapse(true);\n    };\n    const {username} = useSelector(authSelector)\n\n\n    return (\n        <>\n            <div id=\"header\">\n                <ProSidebar collapsed={menuCollapse}>\n                    <SidebarHeader>\n                        <div className=\"logotext\">\n                            {/*<p>{menuCollapse ? \"Logo\" : \"Big Logo\"}</p>*/}\n                        </div>\n                        <div className=\"profile-block text-center mt-5\">\n                            {menuCollapse ? (\n                                <div></div>\n                            ) : (\n                                <>\n                                    <img className=\"profile-block__img mt-5\" src=\"https://source.unsplash.com/user/erondu/110x110\" alt=\"Logo\"/>\n                                    <h6 className=\"profile-block__name mt-2\">{username}</h6>\n                                    <p className=\"profile-block__period\">Пробний період</p>\n                                </>\n                            )}\n                        </div>\n                    </SidebarHeader>\n                    <SidebarContent>\n                        <Menu iconShape=\"square\">\n                            <MenuItem active={true} icon={<BiHomeAlt />}>\n                                <Link to='/home'>\n                                    Предмети\n                                </Link>\n                            </MenuItem>\n                            <MenuItem icon={<FaUserFriends />}>\n                                <Link to=\"/home\">\n                                    Друзі\n                                </Link>\n                            </MenuItem>\n                            <MenuItem icon={<AiOutlineUserAdd />}>\n                                <Link to=\"/home\">\n                                    Запросити друга\n                                </Link>\n                            </MenuItem>\n                            <MenuItem icon={<FiSettings />}>\n                                <Link to=\"/home\">\n                                    Налаштування\n                                </Link>\n                            </MenuItem>\n                        </Menu>\n                    </SidebarContent>\n                    {/*<div className=\"closemenu\" onClick={menuIconClick}>*/}\n                        {/* changing menu collapse icon on click */}\n                        {/*{menuCollapse ? (*/}\n                        {/*    <FiArrowRightCircle/>*/}\n                        {/*) : (*/}\n                        {/*    <FiArrowLeftCircle/>*/}\n                        {/*)}*/}\n                    {/*</div>*/}\n                    <p className=\"close-sidebar\" onClick={menuIconClick}>\n                        {\n                            menuCollapse ? (\n                                <svg className=\"mr-3\" width=\"8\" height=\"15\" viewBox=\"0 0 8 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M6.63412 14.1758C6.48472 14.1763 6.33711 14.1433 6.20213 14.0793C6.06716 14.0153 5.94824 13.9218 5.85412 13.8058L1.02412 7.80581C0.877037 7.62688 0.796631 7.40244 0.796631 7.17081C0.796631 6.93919 0.877037 6.71475 1.02412 6.53581L6.02412 0.535813C6.19386 0.331596 6.43777 0.203172 6.70219 0.178792C6.96662 0.154412 7.2299 0.236074 7.43412 0.405813C7.63834 0.575551 7.76676 0.819463 7.79114 1.08389C7.81552 1.34832 7.73386 1.6116 7.56412 1.81581L3.09412 7.17581L7.41412 12.5358C7.5364 12.6826 7.61408 12.8613 7.63796 13.0509C7.66184 13.2404 7.63092 13.4329 7.54886 13.6054C7.46681 13.7779 7.33705 13.9233 7.17494 14.0244C7.01283 14.1255 6.82515 14.178 6.63412 14.1758Z\" fill=\"#DDDDDD\"/>\n                                </svg>\n                            ) : (\n                                <>\n                                    <svg className=\"mr-3\" width=\"8\" height=\"15\" viewBox=\"0 0 8 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path d=\"M6.63412 14.1758C6.48472 14.1763 6.33711 14.1433 6.20213 14.0793C6.06716 14.0153 5.94824 13.9218 5.85412 13.8058L1.02412 7.80581C0.877037 7.62688 0.796631 7.40244 0.796631 7.17081C0.796631 6.93919 0.877037 6.71475 1.02412 6.53581L6.02412 0.535813C6.19386 0.331596 6.43777 0.203172 6.70219 0.178792C6.96662 0.154412 7.2299 0.236074 7.43412 0.405813C7.63834 0.575551 7.76676 0.819463 7.79114 1.08389C7.81552 1.34832 7.73386 1.6116 7.56412 1.81581L3.09412 7.17581L7.41412 12.5358C7.5364 12.6826 7.61408 12.8613 7.63796 13.0509C7.66184 13.2404 7.63092 13.4329 7.54886 13.6054C7.46681 13.7779 7.33705 13.9233 7.17494 14.0244C7.01283 14.1255 6.82515 14.178 6.63412 14.1758Z\" fill=\"#DDDDDD\"/>\n                                    </svg>\n                                    Згорнути\n                                </>\n                            )\n                        }\n                    </p>\n                    <SidebarFooter>\n                        <Menu iconShape=\"square\">\n                            <MenuItem icon={<FiLogOut />}>\n                                Вийти\n                            </MenuItem>\n                        </Menu>\n                    </SidebarFooter>\n                </ProSidebar>\n            </div>\n        </>\n\n\n    );\n}\n","/home/vlad/Front/zno-helper/src/api/testsApi.ts",[],"/home/vlad/Front/zno-helper/src/store/actions/tests.actions.ts",[],"/home/vlad/Front/zno-helper/src/helpers/authHelpers.ts",[],"/home/vlad/Front/zno-helper/src/helpers/testHelpers.ts",[],"/home/vlad/Front/zno-helper/src/utils/constants.ts",[],"/home/vlad/Front/zno-helper/src/components/svg/CloseCircle.tsx",[],"/home/vlad/Front/zno-helper/src/components/svg/MultiSelect.tsx",[],"/home/vlad/Front/zno-helper/src/components/svg/Delete.tsx",[],"/home/vlad/Front/zno-helper/src/components/svg/SingleSelect.tsx",[],"/home/vlad/Front/zno-helper/src/components/Spinner.tsx",[],"/home/vlad/Front/zno-helper/src/store/selectors.ts",[],"/home/vlad/Front/zno-helper/src/pages/SignUp.tsx",["311","312","313","314","315","316","317","318","319"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom'\nimport { useSelector, useDispatch, RootStateOrAny } from 'react-redux'\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from \"yup\";\nimport { Container, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport MaskedInput from \"react-text-mask\";\nimport CodeInput from '../components/CodeInput'\nimport {checkEmail, checkUsername, checkPhone, register, sendSmsToPhone, validateCode} from \"../store/actions/thunks\";\nimport { RegisterBody } from '../utils/interfaces'\nimport { transformPhone } from \"../helpers/authHelpers\";\nimport { sendSms } from \"../api/authApi\";\nimport {authSelector} from \"../store/selectors\";\nimport { showAlert } from \"../store/actions/alerts.actions\";\n\n\nconst phoneNumberMask = [\n    \"(\",\n    /[1-10]/,\n    /\\d/,\n    /\\d/,\n    \")\",\n    \" \",\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    \"-\",\n    /\\d/,\n    /\\d/,\n    /\\d/,\n    /\\d/\n];\n\nexport const SignUp = (): JSX.Element => {\n    const dispatch = useDispatch()\n    let history = useHistory();\n    const {token} = useSelector(authSelector)\n\n\n    const [username, setUserName] = useState<string>(\"\")\n    const [email, setEmail] = useState<string>(\"\")\n    const [phone, setPhone] = useState<string>(\"\")\n    const [verif, setVerif] = useState<boolean>(true)\n    const [authTemp, setAuthTemp] = useState<RegisterBody>({\n        email: '',\n        otpnum: 0,\n        password: '',\n        phone: '',\n        username:''\n    })\n    const [smsCode, setSmsCode] = useState(0)\n    const state = useSelector((state:RootStateOrAny) => state.auth)\n    const [activeReferal, setActiveReferal] = useState(false)\n\n    const onRegisterUser = async (values) => {\n        try {\n            console.log('values', { values })\n            values.phone = transformPhone(values.phone)\n            const smsCode = await sendSms(values.phone)\n            values.otpnum = smsCode.code\n            setAuthTemp(values)\n            setVerif(false)\n\n        } catch (error) {\n            console.log('error registering user',values)\n        }\n      \n    }\n\n    const initialValues: RegisterBody = {\n        username: '',\n        email: '',\n        phone: '',\n        password: '',\n        otpnum:0\n    };\n\n    const userSchema = Yup.object({\n        // phone: Yup.number().min(9).required('Введи валідний телефон'),\n        username: Yup.string().required('FirstName is required'),\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n        password: Yup.string().min(6, 'Введи 6 символів').required('Password is required')\n    })\n\n    type User = Yup.InferType<typeof userSchema>;\n\n    const onChangeName = (e: React.ChangeEvent<HTMLInputElement>): void => setUserName(e.target.value)\n    const onChangeEmail = (e: React.ChangeEvent<HTMLInputElement>): void => setEmail(e.target.value)\n    const onChangePhone = (e: React.ChangeEvent<HTMLInputElement>): void => setPhone(e.target.value)\n\n\n    const validateUsername = (e: React.ChangeEvent<HTMLInputElement>, handleChange) => {\n        dispatch(checkUsername(username))\n        handleChange(e)\n    }\n\n    const validateEmail = (e: React.ChangeEvent<HTMLInputElement>, handleChange) => {\n        dispatch(checkEmail(email))\n        handleChange(e)\n    }\n\n    const validatePhone = (e: React.ChangeEvent<HTMLInputElement>, handleChange) => {\n        dispatch(checkPhone(phone))\n        handleChange(e)\n    }\n\n    const validUsername = useSelector((state:RootStateOrAny) => state.validation.usernameValid)\n\n    const showReferal = () => {\n        setActiveReferal(!activeReferal)\n    }\n\n    const checkCode = () => {\n        // const response = {\n        //     deviceId: Math.floor(Math.random() * 16) + 5,\n        //     phone: phone.replace(/[-\\s.,$_)(]/g, '').toString().substring(1),\n        //     code: \"559071\"\n        // }\n        // dispatch(validateCode(response))\n        // values.phone = values.phone.replace(/[-\\s.,$_)(]/g, '').toString().substring(1)\n        try {\n            console.log(authTemp)\n            dispatch(register(authTemp))\n        } catch(e) {\n            console.log(\"e\", e)\n            dispatch(showAlert(\"Error\", \"error\"))\n\n        }\n    }\n\n    if(token) {\n        history.push(\"/home\")\n        dispatch(showAlert(\"Success\", \"success\"))\n    }\n\n\n    return (\n        <section className=\"signup promo d-flex justify-content-center align-items-start pt-5\">\n            <Container>\n                <Row className=\"\">\n                    <Col lg={8} className=\"promo-col\">\n                        <p>\n                            <Link to=\"/\">\n                                Z-Helper\n                            </Link>\n                        </p>\n                    </Col>\n                    <Col lg={4} className=\"pt-5 mt-5\">\n                        <h1 className=\"mb-5\">Реєстрація</h1>\n                        <Formik\n                            initialValues={initialValues}\n                            validationSchema={userSchema}\n                            onSubmit={(values, actions) => {\n                                onRegisterUser(values);\n                            }}\n                            render={({ errors, status, touched, handleChange, handleSubmit,\n                                         handleBlur, values }) => (\n                                <>\n                                    {\n                                        verif ? (\n                                            <Form noValidate onSubmit={handleSubmit} className=\"d-block\">\n                                                <Form.Row>\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormikUsername\">\n                                                        <Form.Label>Ім’я користувача</Form.Label>\n                                                        <InputGroup>\n                                                            <InputGroup.Prepend>\n                                                                <InputGroup.Text id=\"inputGroupPrepend\">\n                                                                    <svg width=\"28\" height=\"24\" viewBox=\"0 0 28 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                        <g clip-path=\"url(#clip0)\">\n                                                                            <path d=\"M9.8 12C12.8931 12 15.4 9.31406 15.4 6C15.4 2.68594 12.8931 0 9.8 0C6.70688 0 4.2 2.68594 4.2 6C4.2 9.31406 6.70688 12 9.8 12ZM13.72 13.5H12.9894C12.0181 13.9781 10.9375 14.25 9.8 14.25C8.6625 14.25 7.58625 13.9781 6.61063 13.5H5.88C2.63375 13.5 0 16.3219 0 19.8V21.75C0 22.9922 0.940625 24 2.1 24H14.1269C14.0219 23.6812 13.9781 23.3438 14.0131 23.0016L14.3106 20.1469L14.3631 19.6266L14.7088 19.2562L18.0906 15.6328C17.0187 14.3344 15.4656 13.5 13.72 13.5V13.5ZM15.7019 20.3109L15.4044 23.1703C15.3563 23.6484 15.7325 24.0516 16.1744 23.9953L18.8387 23.6766L24.8719 17.2125L21.735 13.8516L15.7019 20.3109V20.3109ZM27.6937 12.6047L26.0356 10.8281C25.6287 10.3922 24.9637 10.3922 24.5569 10.8281L22.9031 12.6L22.7238 12.7922L25.865 16.1531L27.6937 14.1937C28.1006 13.7531 28.1006 13.0453 27.6937 12.6047V12.6047Z\" fill=\"#929292\"/>\n                                                                        </g>\n                                                                        <defs>\n                                                                            <clipPath id=\"clip0\">\n                                                                                <rect width=\"28\" height=\"24\" fill=\"white\"/>\n                                                                            </clipPath>\n                                                                        </defs>\n                                                                    </svg>\n\n                                                                </InputGroup.Text>\n                                                            </InputGroup.Prepend>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"Ваше ім'я\"\n                                                                aria-describedby=\"inputGroupPrepend\"\n                                                                name=\"username\"\n                                                                value={username}\n                                                                onFocus={(e: React.ChangeEvent<HTMLInputElement>): void => validateUsername(e, handleChange)}\n                                                                onBlur={(e: React.ChangeEvent<HTMLInputElement>): void => validateUsername(e, handleChange)}\n                                                                onChange={onChangeName}\n                                                                autoComplete=\"off\"\n                                                                isInvalid={!!errors.username}\n                                                            />\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                {errors.username}\n                                                            </Form.Control.Feedback>\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Form.Row>\n                                                <Form.Row>\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormikEmail\">\n                                                        <Form.Label>Електронна пошта</Form.Label>\n                                                        <InputGroup>\n                                                            <InputGroup.Prepend>\n                                                                <InputGroup.Text id=\"inputGroupPrepend2\">\n                                                                    <svg width=\"22\" height=\"24\" viewBox=\"0 0 22 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                        <path d=\"M21.5832 8.94375C21.7508 8.79844 22 8.93437 22 9.16406V18.75C22 19.9922 21.0762 21 19.9375 21H2.0625C0.923828 21 0 19.9922 0 18.75V9.16875C0 8.93438 0.244922 8.80312 0.416797 8.94844C1.3793 9.76406 2.65547 10.8 7.03828 14.2734C7.94492 14.9953 9.47461 16.5141 11 16.5047C12.534 16.5188 14.0937 14.9672 14.966 14.2734C19.3488 10.8 20.6207 9.75938 21.5832 8.94375ZM11 15C11.9969 15.0188 13.432 13.6313 14.1539 13.0594C19.8559 8.54531 20.2898 8.15156 21.6047 7.02656C21.8539 6.81562 22 6.4875 22 6.14062V5.25C22 4.00781 21.0762 3 19.9375 3H2.0625C0.923828 3 0 4.00781 0 5.25V6.14062C0 6.4875 0.146094 6.81094 0.395312 7.02656C1.71016 8.14687 2.14414 8.54531 7.84609 13.0594C8.56797 13.6313 10.0031 15.0188 11 15Z\" fill=\"#929292\" />\n                                                                    </svg>\n                                                                </InputGroup.Text>\n                                                            </InputGroup.Prepend>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"Ваш email\"\n                                                                aria-describedby=\"inputGroupPrepend2\"\n                                                                name=\"email\"\n                                                                value={email}\n                                                                autoComplete=\"off\"\n\n                                                                onFocus={(e: React.ChangeEvent<HTMLInputElement>): void => validateEmail(e, handleChange)}\n                                                                onBlur={(e: React.ChangeEvent<HTMLInputElement>): void => validateEmail(e, handleChange)}\n                                                                onChange={onChangeEmail}\n                                                                isInvalid={!!errors.email}\n                                                            />\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                {errors.email}\n                                                            </Form.Control.Feedback>\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Form.Row>\n                                                <Form.Row>\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPhone\">\n                                                        <Form.Label>Номер телефону</Form.Label>\n                                                        <InputGroup>\n                                                            <div className=\"d-flex w-100 \">\n                                                                <InputGroup.Prepend>\n                                                                    <InputGroup.Text id=\"inputGroupPrepend3\">\n                                                                        <svg width=\"22\" height=\"24\" viewBox=\"0 0 22 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                            <g clip-path=\"url(#clip0)\">\n                                                                                <path d=\"M21.2012 1.15363L16.7325 0.0286319C16.2469 -0.0932431 15.7485 0.183319 15.5508 0.680194L13.4883 5.93019C13.3079 6.38957 13.4282 6.92863 13.7848 7.24269L16.3887 9.56769C14.8419 13.163 12.1391 16.1536 8.77467 17.8739L6.64342 15.0333C6.35123 14.6443 5.86138 14.513 5.44029 14.7099L0.627791 16.9599C0.168026 17.1802 -0.0854899 17.7239 0.0262288 18.2536L1.05748 23.1286C1.1649 23.6349 1.5774 24.0005 2.06295 24.0005C13.0672 24.0005 22.0004 14.2739 22.0004 2.25051C22.0004 1.72551 21.6696 1.27082 21.2012 1.15363Z\" fill=\"#929292\" />\n                                                                            </g>\n                                                                            <defs>\n                                                                                <clipPath id=\"clip0\">\n                                                                                    <rect width=\"22\" height=\"24\" fill=\"white\" />\n                                                                                </clipPath>\n                                                                            </defs>\n                                                                        </svg>\n                                                                    </InputGroup.Text>\n                                                                </InputGroup.Prepend>\n                                                                <MaskedInput\n                                                                    mask={phoneNumberMask}\n                                                                    id=\"phone\"\n                                                                    name=\"phone\"\n                                                                    className=\"input-number\"\n                                                                    aria-describedby=\"inputGroupPrepend3\"\n                                                                    placeholder=\"Ваш номер\"\n                                                                    type=\"tel\"\n                                                                    autoComplete=\"off\"\n\n                                                                    value={phone}\n                                                                    onFocus={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangePhone(e)}\n                                                                    isInvalid={!!errors.phone}\n                                                                />\n                                                                <Form.Control.Feedback type=\"invalid\">\n                                                                    {errors.phone}\n                                                                </Form.Control.Feedback>\n                                                            </div>\n\n                                                        </InputGroup>\n                                                    </Form.Group>\n\n                                                </Form.Row>\n                                                <Form.Row>\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPassword\">\n                                                        <Form.Label>Пароль</Form.Label>\n                                                        <InputGroup>\n                                                            <Form.Control\n                                                                type=\"password\"\n                                                                placeholder=\"Ваш пароль\"\n                                                                name=\"password\"\n                                                                autoComplete=\"off\"\n                                                                value={values.password}\n                                                                onChange={handleChange}\n                                                                isInvalid={!!errors.password}\n                                                            />\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                {errors.password}\n                                                            </Form.Control.Feedback>\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Form.Row>\n                                                <Form.Row>\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"Referal\">\n                                                        <p className=\"referal text-center\" onClick={showReferal}>\n                                                            {activeReferal ? 'Реферал' : 'Вказати реферала'}\n                                                        </p>\n                                                        <InputGroup className={activeReferal ? 'd-flex' : 'd-none'}>\n                                                            <Form.Control\n                                                                type=\"text\"\n                                                                placeholder=\"Реферал\"\n                                                                name=\"referral\"\n                                                                value={values.referral}\n                                                                onChange={handleChange}\n                                                            />\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Form.Row>\n                                                <div className=\"mt-5 text-center\">\n                                                    <button type=\"submit\" className=\"btn btn-primary btn-register mr-2\">\n                                                        Зареєструватися\n                                                    </button>\n                                                    <p className=\"mt-3\">\n                                                        Продовжуючи, ти погоджуєшся з\n\n                                                        <Link to=\"/\">\n                                                            Політикою конфідеційності\n                                                        </Link>\n                                                        <span className=\"mx-2\">\n                                                    та\n                                                </span>\n                                                        <Link to=\"/\">\n                                                            Умовами використання\n                                                        </Link>\n                                                        <br/>\n\n                                                    </p>\n                                                    <p>\n                                                        Вже маєш профіль?\n                                                        <Link to=\"/login\" className=\"ml-2\">\n                                                            Увійти\n                                                        </Link>\n                                                    </p>\n                                                </div>\n                                            </Form>\n                                        ) : (\n                                            <Form noValidate onSubmit={handleSubmit} className=\"d-block\">\n                                                <h3>Верифікація телефону</h3>\n                                                <Form.Row className=\"mt-5\">\n                                                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPhone\">\n                                                        <Form.Label>Номер телефону</Form.Label>\n                                                        <InputGroup>\n                                                            <div className=\"d-flex w-100\">\n                                                                <InputGroup.Prepend>\n                                                                    <InputGroup.Text id=\"inputGroupPrepend3\">\n                                                                        <svg width=\"22\" height=\"24\" viewBox=\"0 0 22 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                                            <g clip-path=\"url(#clip0)\">\n                                                                                <path d=\"M21.2012 1.15363L16.7325 0.0286319C16.2469 -0.0932431 15.7485 0.183319 15.5508 0.680194L13.4883 5.93019C13.3079 6.38957 13.4282 6.92863 13.7848 7.24269L16.3887 9.56769C14.8419 13.163 12.1391 16.1536 8.77467 17.8739L6.64342 15.0333C6.35123 14.6443 5.86138 14.513 5.44029 14.7099L0.627791 16.9599C0.168026 17.1802 -0.0854899 17.7239 0.0262288 18.2536L1.05748 23.1286C1.1649 23.6349 1.5774 24.0005 2.06295 24.0005C13.0672 24.0005 22.0004 14.2739 22.0004 2.25051C22.0004 1.72551 21.6696 1.27082 21.2012 1.15363Z\" fill=\"#929292\" />\n                                                                            </g>\n                                                                            <defs>\n                                                                                <clipPath id=\"clip0\">\n                                                                                    <rect width=\"22\" height=\"24\" fill=\"white\" />\n                                                                                </clipPath>\n                                                                            </defs>\n                                                                        </svg>\n                                                                    </InputGroup.Text>\n                                                                </InputGroup.Prepend>\n                                                                <MaskedInput\n                                                                    mask={phoneNumberMask}\n                                                                    id=\"phone\"\n                                                                    name=\"phone\"\n                                                                    className=\"input-number\"\n                                                                    aria-describedby=\"inputGroupPrepend3\"\n                                                                    placeholder=\"Ваш номер\"\n                                                                    type=\"tel\"\n                                                                    autoComplete=\"off\"\n\n                                                                    value={phone}\n                                                                    onFocus={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                                    onBlur={(e: React.ChangeEvent<HTMLInputElement>): void => validatePhone(e, handleChange)}\n                                                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChangePhone(e)}\n                                                                    isInvalid={!!errors.phone}\n                                                                />\n                                                            </div>\n                                                            <div className=\"form-group mt-3 text-center\">\n                                                                <p>Код підтеврдження</p>\n                                                                <CodeInput code={authTemp?.otpnum} />\n                                                                <button type=\"button\" className=\"text-center btn\">Надіслати код ще раз</button>\n                                                            </div>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                            </Form.Control.Feedback>\n                                                        </InputGroup>\n                                                    </Form.Group>\n                                                </Form.Row>\n                                                <div className=\"text-center\">\n                                                    <button type=\"button\" onClick={checkCode} className=\"btn px-5 btn-verification\">\n                                                        Верифікація\n                                                    </button>\n                                                </div>\n                                            </Form>\n                                        )\n                                    }\n\n                                </>\n                            )}\n                        />\n                    </Col>\n                </Row>\n            </Container>\n        </section>\n    )\n}\n","/home/vlad/Front/zno-helper/src/store/reducers/auth.reducer.ts",["320","321","322","323","324"],"import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AuthResponse, StateHadnlers } from \"../../utils/interfaces\";\nimport { checkEmail, login, register, sendSmsToPhone } from \"../actions/thunks\";\n\nconst initialState: AuthResponse & StateHadnlers = {\n    email: '',\n    id: 0,\n    roles: [],\n    token: '',\n    username: '',\n    error: null,\n    loading: false\n}\n\n\nexport const defaultError = 'Something went wrong!'\n\nexport default createReducer(initialState, builder =>\n    builder.addCase(register.pending, (state) => {\n        state.loading = true\n        state.error = null\n    })\n        .addCase(register.fulfilled, (state, action: PayloadAction<AuthResponse>) => {\n            // state = { ...action.payload, ...state }\n            console.log('Registered',action.payload)\n            const { token, id, email, username, roles } = action.payload\n            state.loading = false\n            state.error = null\n            state.token = token\n            state.username = username\n        })\n        .addCase(register.rejected, (state, { error }) => {\n            state.loading = false\n            state.error = error.message ?? defaultError\n        })\n        .addCase(login.pending, (state) => {\n            state.loading = true\n            state.error = null\n        })\n        .addCase(login.fulfilled, (state, action: PayloadAction<AuthResponse>) => {\n            // state = { ...action.payload, ...state }\n            // console.log(action.payload)\n            const {token, email, username} = action.payload\n            state.token = token\n            state.username = username\n            state.loading = false\n            state.error = null\n        })\n        .addCase(login.rejected, (state, { error }) => {\n            state.loading = false\n            state.error = error.message ?? defaultError\n        })\n        .addCase(sendSmsToPhone.pending, (state) => {\n            state.loading = true\n            state.error = null\n        })\n        .addCase(sendSmsToPhone.fulfilled, (state, action: PayloadAction<any>) => {\n            // state = { ...action.payload, ...state }\n            // state.loading = false\n            // state.error = null\n        })\n        .addCase(sendSmsToPhone.rejected, (state, { error }) => {\n            state.loading = false\n            state.error = error.message ?? defaultError\n        })\n\n\n)\n","/home/vlad/Front/zno-helper/src/store/reducers/validation.reducer.ts",[],"/home/vlad/Front/zno-helper/src/store/actions/thunks.ts",["325"],"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { checkValidity, loginUser, registerUser, sendSms, validateSms } from \"../../api/authApi\";\nimport { transformPhone } from \"../../helpers/authHelpers\";\nimport { AuthResponse, CheckCode, CheckResponse, LoginBody, RegisterBody, SmsResponse } from \"../../utils/interfaces\";\n\n\nexport const register = createAsyncThunk<AuthResponse, RegisterBody>('register', (data) =>  {\n    return registerUser(data)\n})\n\nexport const login = createAsyncThunk<AuthResponse, LoginBody>(\n    'login',\n    (data) => loginUser(data)\n)\n\nexport const checkEmail = createAsyncThunk<CheckResponse,string>('checkEmail',\n    (email) => checkValidity('email',email)\n)\nexport const checkPhone = createAsyncThunk<CheckResponse,string>('checkPhone', (phone) => {\n        return checkValidity('phone',phone)\n    }\n)\n\nexport const checkUsername = createAsyncThunk<CheckResponse,string>('checkUsername',\n    (username) => checkValidity('username', username)\n)\n\nexport const sendSmsToPhone = createAsyncThunk<SmsResponse,string>('getSms',\n   async (phone) =>await  sendSms(phone.replace(/[-\\s.,$_)(]/g, '').toString().substring(1))\n)\n\nexport const validateCode = createAsyncThunk<CheckCode, object>('validateCode',\n    (response) => validateSms(response)\n)\n","/home/vlad/Front/zno-helper/src/pages/duel/test_templates/MultiAnswer.tsx",["326"],"/home/vlad/Front/zno-helper/src/pages/duel/test_templates/SingleAnswer.tsx",["327"],"/home/vlad/Front/zno-helper/src/components/PrivateRoute/PrivateRoute.tsx",[],["328","329"],"/home/vlad/Front/zno-helper/src/components/Alert/Alert.tsx",["330","331","332","333","334","335","336"],"import React, { FC } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Alert, { Color } from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {useDispatch, useSelector} from 'react-redux'\nimport { alertSelector, authSelector } from '../../store/selectors';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '20%',\n            zIndex: 10  ,\n            position: 'absolute',\n            right: '20px',\n            top: '20px',\n            '& > * + *': {\n                marginTop: theme.spacing(2),\n            },\n        },\n    }),\n);\n\n\ninterface Alert {\n    alert: any\n}\n\nexport const SimpleAlert:FC<Alert> = ({alert}) => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n    const {alerts} = useSelector(alertSelector)\n    const {token} = useSelector(authSelector)\n    const color:Color = \"warning\"\n    const alertColor:Color = alerts.type\n\n\n    if(!alerts.text) {\n        return null\n    }\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={open} autoHideDuration={5000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity={alertColor??color}>\n                    {alerts.text}\n                </Alert>\n            </Snackbar>\n        </div>\n    )\n}","/home/vlad/Front/zno-helper/src/store/actions/alerts.actions.ts",[],"/home/vlad/Front/zno-helper/src/store/reducers/alert.reducer.ts",["337","338","339"],"import { createReducer, PayloadAction } from \"@reduxjs/toolkit\";\nimport { showAlert } from \"../actions/alerts.actions\";\n\n\nconst initialState: any = {\n    alerts: []\n}\n\nexport const defaultError = 'Something went wrong!'\n\nexport default createReducer(initialState, builder =>\n    builder.addCase(showAlert, (state, action) => {\n        const {text, type} = action.payload\n        state.alerts = action.payload\n    })\n)","/home/vlad/Front/zno-helper/src/components/create-test-templates/template-components/TypePicker.tsx",["340","341","342","343","344","345"],{"ruleId":"346","replacedBy":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","severity":1,"message":"351","line":13,"column":8,"nodeType":"352","messageId":"353","endLine":13,"endColumn":20},{"ruleId":"346","replacedBy":"354"},{"ruleId":"348","replacedBy":"355"},{"ruleId":"350","severity":1,"message":"356","line":4,"column":18,"nodeType":"352","messageId":"353","endLine":4,"endColumn":23},{"ruleId":"350","severity":1,"message":"357","line":4,"column":25,"nodeType":"352","messageId":"353","endLine":4,"endColumn":37},{"ruleId":"350","severity":1,"message":"358","line":61,"column":10,"nodeType":"352","messageId":"353","endLine":61,"endColumn":14},{"ruleId":"350","severity":1,"message":"358","line":23,"column":10,"nodeType":"352","messageId":"353","endLine":23,"endColumn":14},{"ruleId":"350","severity":1,"message":"359","line":1,"column":17,"nodeType":"352","messageId":"353","endLine":1,"endColumn":25},{"ruleId":"350","severity":1,"message":"360","line":13,"column":8,"nodeType":"352","messageId":"353","endLine":13,"endColumn":10},{"ruleId":"350","severity":1,"message":"361","line":3,"column":10,"nodeType":"352","messageId":"353","endLine":3,"endColumn":14},{"ruleId":"350","severity":1,"message":"362","line":2,"column":17,"nodeType":"352","messageId":"353","endLine":2,"endColumn":20},{"ruleId":"350","severity":1,"message":"363","line":2,"column":33,"nodeType":"352","messageId":"353","endLine":2,"endColumn":42},{"ruleId":"350","severity":1,"message":"364","line":4,"column":26,"nodeType":"352","messageId":"353","endLine":4,"endColumn":31},{"ruleId":"350","severity":1,"message":"365","line":4,"column":33,"nodeType":"352","messageId":"353","endLine":4,"endColumn":38},{"ruleId":"350","severity":1,"message":"366","line":116,"column":12,"nodeType":"352","messageId":"353","endLine":116,"endColumn":23},{"ruleId":"350","severity":1,"message":"367","line":116,"column":25,"nodeType":"352","messageId":"353","endLine":116,"endColumn":39},{"ruleId":"350","severity":1,"message":"368","line":120,"column":15,"nodeType":"352","messageId":"353","endLine":120,"endColumn":19},{"ruleId":"350","severity":1,"message":"359","line":1,"column":17,"nodeType":"352","messageId":"353","endLine":1,"endColumn":25},{"ruleId":"350","severity":1,"message":"362","line":2,"column":17,"nodeType":"352","messageId":"353","endLine":2,"endColumn":20},{"ruleId":"350","severity":1,"message":"363","line":2,"column":33,"nodeType":"352","messageId":"353","endLine":2,"endColumn":42},{"ruleId":"350","severity":1,"message":"369","line":2,"column":44,"nodeType":"352","messageId":"353","endLine":2,"endColumn":47},{"ruleId":"350","severity":1,"message":"370","line":4,"column":10,"nodeType":"352","messageId":"353","endLine":4,"endColumn":14},{"ruleId":"350","severity":1,"message":"371","line":4,"column":16,"nodeType":"352","messageId":"353","endLine":4,"endColumn":24},{"ruleId":"350","severity":1,"message":"364","line":4,"column":26,"nodeType":"352","messageId":"353","endLine":4,"endColumn":31},{"ruleId":"350","severity":1,"message":"365","line":4,"column":33,"nodeType":"352","messageId":"353","endLine":4,"endColumn":38},{"ruleId":"350","severity":1,"message":"372","line":33,"column":11,"nodeType":"352","messageId":"353","endLine":33,"endColumn":18},{"ruleId":"350","severity":1,"message":"359","line":1,"column":17,"nodeType":"352","messageId":"353","endLine":1,"endColumn":25},{"ruleId":"350","severity":1,"message":"362","line":2,"column":17,"nodeType":"352","messageId":"353","endLine":2,"endColumn":20},{"ruleId":"350","severity":1,"message":"363","line":2,"column":33,"nodeType":"352","messageId":"353","endLine":2,"endColumn":42},{"ruleId":"350","severity":1,"message":"369","line":2,"column":44,"nodeType":"352","messageId":"353","endLine":2,"endColumn":47},{"ruleId":"350","severity":1,"message":"373","line":5,"column":9,"nodeType":"352","messageId":"353","endLine":5,"endColumn":21},{"ruleId":"350","severity":1,"message":"374","line":6,"column":9,"nodeType":"352","messageId":"353","endLine":6,"endColumn":20},{"ruleId":"350","severity":1,"message":"375","line":19,"column":10,"nodeType":"352","messageId":"353","endLine":19,"endColumn":17},{"ruleId":"350","severity":1,"message":"376","line":19,"column":19,"nodeType":"352","messageId":"353","endLine":19,"endColumn":27},{"ruleId":"350","severity":1,"message":"377","line":19,"column":29,"nodeType":"352","messageId":"353","endLine":19,"endColumn":33},{"ruleId":"350","severity":1,"message":"378","line":19,"column":35,"nodeType":"352","messageId":"353","endLine":19,"endColumn":43},{"ruleId":"350","severity":1,"message":"379","line":31,"column":22,"nodeType":"352","messageId":"353","endLine":31,"endColumn":33},{"ruleId":"380","severity":1,"message":"381","line":201,"column":12,"nodeType":"382","endLine":201,"endColumn":28,"suggestions":"383"},{"ruleId":"380","severity":1,"message":"384","line":257,"column":8,"nodeType":"382","endLine":257,"endColumn":34,"suggestions":"385"},{"ruleId":"350","severity":1,"message":"386","line":3,"column":36,"nodeType":"352","messageId":"353","endLine":3,"endColumn":46},{"ruleId":"350","severity":1,"message":"387","line":6,"column":5,"nodeType":"352","messageId":"353","endLine":6,"endColumn":15},{"ruleId":"350","severity":1,"message":"388","line":14,"column":7,"nodeType":"352","messageId":"353","endLine":14,"endColumn":17},{"ruleId":"350","severity":1,"message":"386","line":3,"column":46,"nodeType":"352","messageId":"353","endLine":3,"endColumn":56},{"ruleId":"350","severity":1,"message":"362","line":4,"column":10,"nodeType":"352","messageId":"353","endLine":4,"endColumn":13},{"ruleId":"350","severity":1,"message":"389","line":4,"column":15,"nodeType":"352","messageId":"353","endLine":4,"endColumn":24},{"ruleId":"350","severity":1,"message":"369","line":4,"column":42,"nodeType":"352","messageId":"353","endLine":4,"endColumn":45},{"ruleId":"350","severity":1,"message":"386","line":3,"column":44,"nodeType":"352","messageId":"353","endLine":3,"endColumn":54},{"ruleId":"350","severity":1,"message":"390","line":81,"column":15,"nodeType":"352","messageId":"353","endLine":81,"endColumn":25},{"ruleId":"350","severity":1,"message":"386","line":3,"column":44,"nodeType":"352","messageId":"353","endLine":3,"endColumn":54},{"ruleId":"346","replacedBy":"391"},{"ruleId":"348","replacedBy":"392"},{"ruleId":"350","severity":1,"message":"393","line":11,"column":10,"nodeType":"352","messageId":"353","endLine":11,"endColumn":16},{"ruleId":"350","severity":1,"message":"394","line":11,"column":18,"nodeType":"352","messageId":"353","endLine":11,"endColumn":28},{"ruleId":"350","severity":1,"message":"395","line":12,"column":9,"nodeType":"352","messageId":"353","endLine":12,"endColumn":15},{"ruleId":"350","severity":1,"message":"396","line":12,"column":27,"nodeType":"352","messageId":"353","endLine":12,"endColumn":44},{"ruleId":"350","severity":1,"message":"397","line":12,"column":46,"nodeType":"352","messageId":"353","endLine":12,"endColumn":64},{"ruleId":"350","severity":1,"message":"398","line":13,"column":10,"nodeType":"352","messageId":"353","endLine":13,"endColumn":22},{"ruleId":"350","severity":1,"message":"399","line":14,"column":9,"nodeType":"352","messageId":"353","endLine":14,"endColumn":14},{"ruleId":"350","severity":1,"message":"400","line":18,"column":27,"nodeType":"352","messageId":"353","endLine":18,"endColumn":38},{"ruleId":"350","severity":1,"message":"356","line":4,"column":18,"nodeType":"352","messageId":"353","endLine":4,"endColumn":23},{"ruleId":"350","severity":1,"message":"357","line":4,"column":25,"nodeType":"352","messageId":"353","endLine":4,"endColumn":37},{"ruleId":"350","severity":1,"message":"401","line":9,"column":58,"nodeType":"352","messageId":"353","endLine":9,"endColumn":72},{"ruleId":"350","severity":1,"message":"402","line":9,"column":74,"nodeType":"352","messageId":"353","endLine":9,"endColumn":86},{"ruleId":"350","severity":1,"message":"403","line":51,"column":12,"nodeType":"352","messageId":"353","endLine":51,"endColumn":19},{"ruleId":"350","severity":1,"message":"404","line":51,"column":21,"nodeType":"352","messageId":"353","endLine":51,"endColumn":31},{"ruleId":"350","severity":1,"message":"405","line":52,"column":11,"nodeType":"352","messageId":"353","endLine":52,"endColumn":16},{"ruleId":"350","severity":1,"message":"358","line":85,"column":10,"nodeType":"352","messageId":"353","endLine":85,"endColumn":14},{"ruleId":"350","severity":1,"message":"406","line":107,"column":11,"nodeType":"352","messageId":"353","endLine":107,"endColumn":24},{"ruleId":"350","severity":1,"message":"407","line":3,"column":10,"nodeType":"352","messageId":"353","endLine":3,"endColumn":20},{"ruleId":"350","severity":1,"message":"408","line":26,"column":28,"nodeType":"352","messageId":"353","endLine":26,"endColumn":30},{"ruleId":"350","severity":1,"message":"409","line":26,"column":32,"nodeType":"352","messageId":"353","endLine":26,"endColumn":37},{"ruleId":"350","severity":1,"message":"410","line":26,"column":49,"nodeType":"352","messageId":"353","endLine":26,"endColumn":54},{"ruleId":"350","severity":1,"message":"409","line":43,"column":27,"nodeType":"352","messageId":"353","endLine":43,"endColumn":32},{"ruleId":"350","severity":1,"message":"411","line":3,"column":10,"nodeType":"352","messageId":"353","endLine":3,"endColumn":24},{"ruleId":"350","severity":1,"message":"389","line":2,"column":9,"nodeType":"352","messageId":"353","endLine":2,"endColumn":18},{"ruleId":"350","severity":1,"message":"389","line":2,"column":10,"nodeType":"352","messageId":"353","endLine":2,"endColumn":19},{"ruleId":"346","replacedBy":"412"},{"ruleId":"348","replacedBy":"413"},{"ruleId":"350","severity":1,"message":"414","line":4,"column":8,"nodeType":"352","messageId":"353","endLine":4,"endColumn":18},{"ruleId":"350","severity":1,"message":"415","line":5,"column":8,"nodeType":"352","messageId":"353","endLine":5,"endColumn":16},{"ruleId":"350","severity":1,"message":"416","line":7,"column":8,"nodeType":"352","messageId":"353","endLine":7,"endColumn":14},{"ruleId":"350","severity":1,"message":"417","line":8,"column":8,"nodeType":"352","messageId":"353","endLine":8,"endColumn":17},{"ruleId":"350","severity":1,"message":"418","line":9,"column":9,"nodeType":"352","messageId":"353","endLine":9,"endColumn":20},{"ruleId":"419","severity":1,"message":"420","line":28,"column":11,"nodeType":"352","messageId":"421","endLine":28,"endColumn":16},{"ruleId":"350","severity":1,"message":"422","line":36,"column":12,"nodeType":"352","messageId":"353","endLine":36,"endColumn":17},{"ruleId":"350","severity":1,"message":"423","line":1,"column":25,"nodeType":"352","messageId":"353","endLine":1,"endColumn":38},{"ruleId":"350","severity":1,"message":"424","line":13,"column":16,"nodeType":"352","messageId":"353","endLine":13,"endColumn":20},{"ruleId":"350","severity":1,"message":"425","line":13,"column":22,"nodeType":"352","messageId":"353","endLine":13,"endColumn":26},{"ruleId":"350","severity":1,"message":"426","line":2,"column":24,"nodeType":"352","messageId":"353","endLine":2,"endColumn":34},{"ruleId":"350","severity":1,"message":"427","line":3,"column":8,"nodeType":"352","messageId":"353","endLine":3,"endColumn":18},{"ruleId":"350","severity":1,"message":"428","line":7,"column":8,"nodeType":"352","messageId":"353","endLine":7,"endColumn":20},{"ruleId":"350","severity":1,"message":"386","line":9,"column":9,"nodeType":"352","messageId":"353","endLine":9,"endColumn":19},{"ruleId":"350","severity":1,"message":"429","line":51,"column":12,"nodeType":"352","messageId":"353","endLine":51,"endColumn":15},{"ruleId":"350","severity":1,"message":"430","line":52,"column":11,"nodeType":"352","messageId":"353","endLine":52,"endColumn":23},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"@typescript-eslint/no-unused-vars","'PrivateRoute' is defined but never used.","Identifier","unusedVar",["431"],["432"],"'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'User' is defined but never used.","'useState' is defined but never used.","'ph' is defined but never used.","'Link' is defined but never used.","'Col' is defined but never used.","'Jumbotron' is defined but never used.","'Badge' is defined but never used.","'Alert' is defined but never used.","'copySuccess' is assigned a value but never used.","'setCopySuccess' is assigned a value but never used.","'link' is assigned a value but never used.","'Row' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'classes' is assigned a value but never used.","'SingleAnswer' is defined but never used.","'MultiAnswer' is defined but never used.","'Content' is defined but never used.","'ESubject' is defined but never used.","'Test' is defined but never used.","'TestWrap' is defined but never used.","'setTestMode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'testWrap'. Either include it or remove the dependency array.","ArrayExpression",["433"],"React Hook React.useCallback has missing dependencies: 'changeTestCollapseState', 'handleChangeTestMode', 'removeTest', 'setTestExplanation', and 'setTestTitle'. Either include them or remove the dependency array.",["434"],"'FormSelect' is defined but never used.","'CardHeader' is defined but never used.","'tokenValid' is assigned a value but never used.","'Container' is defined but never used.","'optionText' is assigned a value but never used.",["431"],["432"],"'FaList' is defined but never used.","'FaRegHeart' is defined but never used.","'FiHome' is defined but never used.","'FiArrowLeftCircle' is defined but never used.","'FiArrowRightCircle' is defined but never used.","'RiPencilLine' is defined but never used.","'BiCog' is defined but never used.","'MdExitToApp' is defined but never used.","'sendSmsToPhone' is defined but never used.","'validateCode' is defined but never used.","'smsCode' is assigned a value but never used.","'setSmsCode' is assigned a value but never used.","'state' is assigned a value but never used.","'validUsername' is assigned a value but never used.","'checkEmail' is defined but never used.","'id' is assigned a value but never used.","'email' is assigned a value but never used.","'roles' is assigned a value but never used.","'transformPhone' is defined but never used.",["431"],["432"],"'IconButton' is defined but never used.","'Collapse' is defined but never used.","'Button' is defined but never used.","'CloseIcon' is defined but never used.","'useDispatch' is defined but never used.","@typescript-eslint/no-redeclare","'Alert' is already defined.","redeclared","'token' is assigned a value but never used.","'PayloadAction' is defined but never used.","'data' is assigned a value but never used.","'type' is assigned a value but never used.","'makeStyles' is defined but never used.","'InputLabel' is defined but never used.","'NativeSelect' is defined but never used.","'age' is assigned a value but never used.","'handleChange' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},"Update the dependencies array to be: [testWrap, testWrap.tests]",{"range":"439","text":"440"},"Update the dependencies array to be: [changeTestCollapseState, handleChangeTestMode, removeTest, setTestExplanation, setTestTitle, testWrap.tests]",{"range":"441","text":"442"},[6656,6672],"[testWrap, testWrap.tests]",[8975,9001],"[changeTestCollapseState, handleChangeTestMode, removeTest, setTestExplanation, setTestTitle, testWrap.tests]"]